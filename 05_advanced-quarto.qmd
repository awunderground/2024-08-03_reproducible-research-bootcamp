---
title: "Advanced Quarto"
subtitle: "" 
format: 
  html: 
    code-line-numbers: true
    fig-align: "center"
editor_options: 
  chunk_output_type: console
---

![Chemistry stencils that used to be used for drawing equipment in lab notebooks](images/Schablone_Logarex_25524-S,_Chemie_II.jpg)

```{r hidden-here-load}
#| include: false

exercise_number <- 1
```

## Introduction

This set of notes introduces advanced Quarto concepts including params and embed-resources YAML headers, mathematical notation, cross references, and citations. The [Quarto website](https://quarto.org/docs/guide/) includes more gems and is an example of high-quality technical documentation.

```{r}
#| echo: false
#| warning: false

library(tidyverse)
library(gt)

theme_set(theme_minimal())

```

```{r}
#| echo: false
exercise_number <-  1

```

## YAMl Headers

### execute

Most options that change the behavior of code chunks can be set for all code chunks in a document using `execute` in the YAML header. 

For example, if we want to turn off warnings for the entire document, we can include

    execute:
      warning: false

Here are some of the most useful options:

| Option         | Effect                |
|----------------|-----------------------|
| `echo: false`    | Hides code in output  |
| `eval: false`    | Turns off evaluation  |
| `output: false`  | Hides code output     |
| `warning: false` | Turns off warnings    |
| `message: false` | Turns off messages    |
| `fig-height: 8`  | Changes figure width in inches |
| `fig-width: 8`   | Changes figure height in inches |

### params

Quarto documents have YAML headers, which can contain many output specific settings. This YAML header creates an HTML document with code folding and a floating table of contents:

```         
---
format: 
  html:
    embed-resources: true
    code-fold: true
    toc: true
---  
```

One key specification in the YAML header are parameters or `params`. Here is an example:

```         
---
format: html
params:
  state: "Virginia"
---
```

Now state can be referred to anywhere in R code as `params$state`. 

Parameters are useful for a couple of reasons:

1. We can clearly change key values for a Quarto document in the YAML header. This could be a useful place to define constants and avoid [magic numbers](https://www.inf.unibz.it/~calvanese/teaching/05-06-ip/lecture-notes/uni04/node17.html). 
2. We can create a template and programmatically iterate the template over a set of values with the `quarto_render()` function and `library(purrr)`. [This blog](https://urban-institute.medium.com/iterated-fact-sheets-with-r-markdown-d685eb4eafce) describes the idea and provides example code! The [Mobility Metrics Data Tables](https://upward-mobility.urban.org/measuring-upward-mobility-counties-and-cities-across-us) and [SLFI State Fiscal Briefs](https://www.urban.org/policy-centers/cross-center-initiatives/state-and-local-finance-initiative/projects/state-fiscal-briefs) are key examples of this workflow. The code to create the Mobility Metrics Data Tables is publicly available [on Github](https://github.com/UI-Research/gates-mobility-metrics-pages). 

### embed-resources

::: {.callout-warning}
Unlike R Markdown, images and other content are not embedded in .html from Quarto by default. Be sure to include `embed-resources: true` in YAML headers to embed content and make documents easier to share.

Suppose we embed an image called `image.png` in a Quarto document called `example.qmd`, which, when rendered, creates `example.html`. If we don't include `embed-resources: true`, then we will need to share `image.png` and `example.html` to see the embedded image. This is also true for other files like `.css` which is useful to provide custom styling for websites. 
:::

::: callout
#### [`r paste("Exercise", exercise_number)`]{style="color:#1696d2;"}


1.  In the `hello-quarto.qmd` file you previously created, add `date: today` to your YAML header after `title`. This will update every time the document is rendered.
:::

## Sections

The Markdown text for creating headers is important for visual styles, section numbering, tables of contents, and cross references.

```
# Section Header {#sec-one}

## Subsection Header {#sec-two}

### Minor Section Header {#sec-three}
```

The extra syntax to the right of the section is necessary for cross references. 

## Figures and Visualizations

```{r}
#| label: load-pkgs
#| code-summary: "Packages"
#| message: false
#| warning: false
#| echo: false

library(tidyverse)  # for data wrangling and visualization
library(knitr)      # for tables
library(broom)      # for model summary
library(urbnthemes) # for ggplot2 theme

set_urbn_defaults(style = "print")

```

### Figures {#sec-figures}

Quarto has powerful tools for including images. It also includes native tools for adding alt text directly to images. For example, the following code generates the subsequent image:

```
![stenomylus](images/Stenomylus.jpg){#fig-stenomylus fig-alt="A sketch of two stenomylus."}
```

![stenomylus](images/Stenomylus.jpg){#fig-stenomylus fig-alt="A sketch of two stenomylus."}

Quarto also allows for easily laying out multiple figures.

```
:::{#fig-camels-combo layout-ncol=2}

![stenomylus](images/Stenomylus.jpg){#fig-stenomylus}

![Hanno](images/camels.jpeg){#fig-camels}

Stenomylus and Camels
:::

```

:::{#fig-camels-combo layout-ncol=2}

![stenomylus](images/Stenomylus.jpg){#fig-stenomylus}

![Hanno](images/camels.jpeg){#fig-camels}

Stenomylus and Camels
:::

### Data Visualization {#sec-dataviz}

Quarto works well with `library(ggplot2)`. Consider an examples using the `cars` dataset, which contains `speed` and `dist` for `r nrow(cars)`. @fig-histogram shows two histograms displaying the distributions of `speed` and `dist` individually.

```{r}
#| label: fig-histogram
#| fig-cap: "Histograms of individual variables"
#| fig-subcap:
#|   - "Histogram of `speed`s"
#|   - "Histogram of `dist`s" 
#| layout-ncol: 2

ggplot(cars, aes(x = speed)) +
  geom_histogram(bins = 15) +
  labs(title = "Histogram of speeds")

ggplot(cars, aes(x = dist)) +
  geom_histogram(bins = 15) +
  labs(title = "Histogram of distances")

```

@fig-scatterplot displays the relationship between these two variables in a scatterplot.

```{r}
#| label: fig-scatterplot
#| fig-cap: "Scatterplot of speed vs. distances"

cars |>
  ggplot(aes(x = speed, y = dist)) +
  geom_point(alpha = 0.3) +
  labs(title = "Cars Traveling at Higher Speeds Take Longer to Stop") +
  scatter_grid()

```

### Data Tables {#sec-tables}

The default for df-print is kable. This is the only type of table that works with the table references. kable works well until there is tons of data, where paged thrives. 

@tbl-stats-kable displays basic summary statistics for these two variables.

```{r}
#| label: tbl-stats-kable
#| tbl-cap: "Summary statistics for speed and dist (kable)"

cars |>
  summarise(
    `Median speed` = median(speed),
    `IQR speed` = IQR(speed),
    `Median dist` = median(dist),
    `IQR dist` = IQR(dist),
    `Correlation, r` = cor(speed, dist)
  ) |>
  kable(digits = c(0, 0, 0, 0, 2))

```

### Diagrams {#sec-diagrams}

Quarto has access to Mermaid and Graphviz for creating diagrams. Here is a simple example from the [Quarto documentation](https://quarto.org/docs/authoring/diagrams.html):

```{mermaid}
flowchart LR
  A[Hard edge] --> B(Round edge)
  B --> C{Decision}
  C --> D[Result one]
  C --> E[Result two]
```

## Equations {#sec-equations}

### First Model

We can fit a simple linear regression model of the form shown in @eq-slr.

$$
dist = \hat{\beta}_0 + \hat{\beta}_1 \times speed + \epsilon
$$ {#eq-slr}

@tbl-lm shows the regression output for this model.

```{r}
#| label: tbl-lm
#| tbl-cap: "Linear regression model for predicting price from area"

dist_fit <- lm(dist ~ speed, data = cars)
  
dist_fit |>
  tidy() |>
  kable(digits = c(0, 0, 2, 2, 2))

```

### Second Model

Let's fit a more complicated multiple linear regression model of the form shown in @eq-mlr. 

$$
dist = \hat{\beta}_0 + \hat{\beta}_1 \times speed + \hat{\beta}_2 \times speed ^ 2 + \epsilon
$$ {#eq-mlr}

@tbl-lm2 shows the regression output for this model.

```{r}
#| label: tbl-lm2
#| tbl-cap: "Second linear regression model for predicting price from area"

dist_fit2 <- lm(dist ~ poly(speed, degree = 2, raw = TRUE), data = cars)
  
dist_fit2 |>
  tidy() |>
  kable(digits = c(0, 0, 2, 2, 2))

```

### Math Mode

Use `$` to start and stop in-line math notation and `$$` to start multi-line math notation. Math notation uses LaTeX's syntax for mathematical notation. 

Here's an example with in-line math:

``` markdown
Consider a binomially distributed random variable, $X \sim binom(n, p)$. 
```

Consider a binomially distributed random variable, $X \sim binom(n, p)$.

Here's an example with a chunk of math:

``` markdown
$$
P(X = x) = {n \choose x} p ^ x (1 - p) ^ {n - x}
$${#eq-binomial}
```

$$
P(X = x) = {n \choose x} p ^ x (1 - p) ^ {n - x}
$$ {#eq-binomial}

### Important Syntax

Math mode recognizes basic math symbols available on your keyboard including `+`, `-`, `*`, `/`, `>`, `<`, `(`, and `)`.

Math mode contains all greek letters. For example, `\alpha` ($\alpha$) and `\beta` ($\beta$).

| LaTeX      | Symbol     |
|------------|------------|
| `\alpha`   | $\alpha$   |
| `\beta`    | $\beta$    |
| `\gamma`   | $\gamma$   |
| `\Delta`   | $\Delta$   |
| `\epsilon` | $\epsilon$ |
| `\theta`   | $\theta$   |
| `\pi`      | $\pi$      |
| `\sigma`   | $\sigma$   |
| `\chi`     | $\chi$     |

: My Caption {#tbl-greek}

Math mode also recognizes $\log(x)$ (`\log(x)`) and $\sqrt{x}$ (`\sqrt{x}`).

Superscripts (`^`) are important for exponentiation and subscripts (`_`) are important for adding indices. `y = x ^ 2` renders as $y = x ^ 2$ and `x_1, x_2, x_3` renders as $x_1, x_2, x_3$. Brackets are useful for multi-character superscripts and subscripts like $s_{11}$ (`s_{11}`).

It is useful to add symbols to letters. For example, `\bar{x}` is useful for sample means ($\bar{x}$), `\hat{y}` is useful for predicted values ($\hat{y}$), and `\vec{\beta}` is useful for vectors of coefficients ($\vec{\beta}$).

Math mode supports fractions with `\frac{x}{y}` ($\frac{x}{y}$), big parentheses with `\left(\right)` ($\left(\right)$), and brackets with `\left[\right]` ($\left[\right]$).

Math mode has a symbol for summation. Let's combine it with bars, fractions, subscripts, and superscipts to show sample mean `\bar{x} = \frac{1}{n}\sum_i^n x_i`, which looks like $\bar{x} = \frac{1}{n}\sum_i^n x_i$.

`\sim` is how to add the tilde for distributed as. For example, `X \sim N(\mu = 0, \sigma = 1)` shows the normal distribution $X \sim N(\mu = 0, \sigma = 1)$.

Matrices are are a little bit more work in math mode. Consider the follow variance-covariance matrix:

```         
\begin{bmatrix}
s_{11}^2 & s_{12}\\
s_{21} & s_{22}^2
\end{bmatrix}
```

$$
\begin{bmatrix}
s_{11}^2 & s_{12}\\
s_{21} & s_{22}^2
\end{bmatrix}
$$

[This guide](https://en.wikibooks.org/wiki/LaTeX/Mathematics) provides and exhaustive look at math options in Quarto.

::: callout-warning
Math mode is finicky! Small errors like mismatched parentheses or superscript and subscript errors will cause Quarto documents to fail to render. Write math carefully and render early and often.
:::

## Cross references {#sec-cross-references}

This document is littered with cross references. Cross references require labeling objects. For example:

```markdown
## Cross references {#sec-cross-references}

$$
dist = \hat{\beta}_0 + \hat{\beta}_1 \times speed + \epsilon
$$ {#eq-slr}

```

After labeling objects, simply reference the tags with `@`. 

The numbers in cross references automatically update when additional referenced objects are added (e.g. a table is added before table 1).

## Tabset Panels

Tabset panels are a useful way to collapse related information. 

::: {.panel-tabset}

## Visualization

```{r}
cars |>
  ggplot(mapping = aes(x = speed, y = dist)) +
  geom_point()

```

## Table

```{r}
cars |>
  gt()

```

:::

```
::: {.panel-tabset}

## Section 1

Content!

## Section 2

Content!

:::




```








## Callouts {#sec-callouts}

:::{.callout-note}
This template is incomplete and we are always looking for help to expand it!
:::

:::{.callout-warning}
Caution, quarto is so powerful you may abandon LaTeX. 
:::

:::{.callout-important}
Reproducible work is a cornerstone of quality research. Quarto makes reproducible work easy and fun. 
:::

:::{.callout-tip collapse="true"}
Use `library(urbntemplates)` to access Urban Institute quarto templates. 
:::

:::{.callout-caution collapse="true"}
Quarto may transform the way the Urban Institute communicates research. 
:::

## Footnotes {#sec-footnotes}

Here is an inline note^[The tooltip is pretty cool!], footnote[^1], and a much longer footnote.[^longnote]

[^1]: I suppose the footnotes are really more endnotes. 

[^longnote]: The longnote gives the ability to add very long footnotes. 
  
  Long notes can contain multiple paragraphs. 

The notes are created with the following:

```markdown
Here is an inline note^[The tooltip is pretty cool!], footnote[^1], and a much longer footnote.[^longnote]

[^1]: I suppose the footnotes are really more endnotes. 

[^longnote]: The longnote gives the ability to add very long footnotes. 
  
  Long notes can contain multiple paragraphs. 

The notes are created with the following:
```




## Citations

### Zotero

[Zotero](https://www.zotero.org/) is a free and open-source software for organizing research and managing citations.

::: {.callout-tip}
## Digital Object Identifier (DOI)

DOIs are persistent identifiers that uniquely identify objects including many academic papers. For example, `10.1198/jcgs.2009.07098` identifies "A Layered Grammar of Graphics" by Hadley Wickham.
:::

::: callout
#### [`r paste("Exercise", exercise_number)`]{style="color:#1696d2;"}

```{r}
#| echo: false
exercise_number <- exercise_number + 1

```

1.  [Install Zotero](https://www.zotero.org/download/).
2.  Find the DOI for "Tidy Data" by Hadley Wickham.
3.  Click the magic wand in Zotero and paste the DOI.

```{r}
#| echo: false
#| fig-align: "center"

knitr::include_graphics(here::here("images", "magic-wand.png"))

```

4.  Review the new entry in Zotero.
:::

### Zotero Integration

Zotero has a powerful integration with Quarto. In practice, it's one click to add a DOI to Zotero and then one click to add a citation to Quarto.

RStudio automatically adds **My Library** from Zotero. Simply switch to the Visual Editor (top left in RStudio), click "Insert", and click "Citation". This will open a prompt to insert a citation into the Quarto document. 

The citation is automatically added with parentheses to go at the end of sentences. Delete the square brackets to convert the citation to an in-line citation. 

Inserting the citation automatically adds the citation to the references section. Deleting the reference automatically deletes the citation from the references section. 

Zotero Groups are useful for sharing citations and Zotero Group Libraries need to be added to RStudio. To set this up:

To set this up, in RStudio:

1. Go to Tools and select "Global Options"
2. Select "RMarkdown" and then click "Citations"
3. For "Use Libraries" choose "Selected Libraries"
4. Select the group libraries to add

::: callout

#### [`r paste("Exercise", exercise_number)`]{style="color:#1696d2;"}

```{r}
#| echo: false
exercise_number <- exercise_number + 1

```

1. Cite "Tidy Data" by Hadley Wickham in your Quarto document. 
2. Click "Render"

:::

## HTML Styles

### Built-in Themes

Quarto includes [25 themes](https://quarto.org/docs/output-formats/html-themes.html) that can be changes using the `theme:` option in a YAML header. 

### Custom Themes

Sassy Cascading Style Sheets (.scss) files allow for programming styles. The 25 custom themes linked above are supported by .scss files that describe their style with code. The Urban Institute has an [unofficial .scss file](https://github.com/UI-Research/urbnquarto/blob/main/web-report/urbn.scss) to put Quarto documents in the Urban style. 

.scss is the best way to change the overall style of .html output from Quarto.

### More Resources

- [Quarto Guide](https://quarto.org/docs/guide/)
- [Iterating fact sheets and web pages with Quarto](https://urban-institute.medium.com/iterated-fact-sheets-with-r-markdown-d685eb4eafce)



