[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Reproducible Research Bootcamp",
    "section": "",
    "text": "Abstract\nA reproducible research workflow should generate the same results from the same inputs every time. Unfortunately, software changes, key documentation is skipped, and that hard drive from graduate school disappeared during that last move. Reproducible research should be a minimum expectation of computational science, but too many researchers lack the tools to embrace a fully reproducible workflow. This full-day course aims to equip researchers with fundamental tools for reproducible research. The course will introduce Quarto, Git and GitHub, coding best practices, and environment management with renv through hands-on exercises and clear resources. Attendees will leave equipped to weather constantly changing software versions, documentation will be too fun to skip, and even a missing hard drive won’t ruin years of work. The course focuses on R but the content is broadly applicable.",
    "crumbs": [
      "Abstract"
    ]
  },
  {
    "objectID": "01_syllabus.html",
    "href": "01_syllabus.html",
    "title": "1  Syllabus",
    "section": "",
    "text": "1.1 Background",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Syllabus</span>"
    ]
  },
  {
    "objectID": "01_syllabus.html#background",
    "href": "01_syllabus.html#background",
    "title": "1  Syllabus",
    "section": "",
    "text": "Lead Data Scientist for Statistical Computing at the Urban Institute\nAdjunct Professor in the McCourt School of Public Policy at Georgetown University\nAmerican Statistical Association Traveling Course Instructor",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Syllabus</span>"
    ]
  },
  {
    "objectID": "01_syllabus.html#r-projects",
    "href": "01_syllabus.html#r-projects",
    "title": "1  Syllabus",
    "section": "1.2 R Projects",
    "text": "1.2 R Projects\n\nSynthetic data generation (rstudio::conf(2022) talk about library(tidysynthesis))\nFormal privacy/differential privacy evaluation (code) (arXiv)\nProjects that iterate with R Markdown\nManage the Urban Institute ggplot2 theme (Examples) (Code)\nUrban Institute R Users Group",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Syllabus</span>"
    ]
  },
  {
    "objectID": "01_syllabus.html#questions-for-you",
    "href": "01_syllabus.html#questions-for-you",
    "title": "1  Syllabus",
    "section": "1.3 Questions for You",
    "text": "1.3 Questions for You\n\nWhat types of analyses do you develop?\nWhat is your programming experience?\nWhat are you most interested to learn?",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Syllabus</span>"
    ]
  },
  {
    "objectID": "01_syllabus.html#outline",
    "href": "01_syllabus.html#outline",
    "title": "1  Syllabus",
    "section": "1.4 Outline",
    "text": "1.4 Outline\nProcess\n\nPlease ask questions at any time.\nI need to know how you are doing. Please ask lots of questions and give your reactions.\nI will check in during breaks about pacing and content.\n\nGoals\n\nEnthusiasm\nDevelop a firm foundation with tools for reproducible research\nLeave with enough understanding and resources that you can apply the covered material to your own work\n\nYou will still need to look stuff up!\nI will try to give you hints for where to find help",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Syllabus</span>"
    ]
  },
  {
    "objectID": "02_embrace-your-fallibility.html",
    "href": "02_embrace-your-fallibility.html",
    "title": "2  Embrace Your Fallibility",
    "section": "",
    "text": "2.1 Embrace Your Fallibility",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Embrace Your Fallibility</span>"
    ]
  },
  {
    "objectID": "02_embrace-your-fallibility.html#embrace-your-fallibility",
    "href": "02_embrace-your-fallibility.html#embrace-your-fallibility",
    "title": "2  Embrace Your Fallibility",
    "section": "",
    "text": "2.1.1 Why are we here?\nThe unifying interest of data scientists and statisticians is that we want to learn about the world using data.\nWorking with data has always been tough. It has always been difficult to create analyses that are\n\nAccurate\nReproducible and auditable\nCollaborative\n\nWorking with data has gotten tougher with time. Data sources, methods, and tools have become more sophisticated. This leaves a lot of us stressed out because errors and mistakes feel inevitable and are embarrassing.\n\n\n2.1.2 What are we going to do?\nErrors and mistakes are inevitable. It’s time to embrace our fallibility.\nIn The Field Guide to Understanding Human Error (Dekker 2014), the author argues that there are two paradigms:\n\nOld-World View: errors are the fault of individuals\nNew-World View: errors are the fault of flawed systems that fail individuals\n\nErrors and mistakes are inevitable. We want to use systems that don’t fail us as statisticians and data scientists. This is our gestalt moment like the famous duck-rabbit illusion in Figure 2.1.\n\n\n2.1.3 How are we going to do this?\nErrors and mistakes are inevitable. We want to adopt evidence-based best practices that minimize the probability of making an error and maximize the probability of catching an error when it inevitably happens.\n(Parker, n.d.) describes a process called opinionated analysis development.\nWe’re going to adopt the approaches outlined in Opinionated Analysis Development and then actually implement them using modern data science tools.\nThrough years of applied data analysis, I’ve found these tools to be essential for creating analyses that are\n\nAccurate\nReproducible and auditable\nCollaborative",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Embrace Your Fallibility</span>"
    ]
  },
  {
    "objectID": "02_embrace-your-fallibility.html#why-is-modern-data-analysis-difficult-to-do-well",
    "href": "02_embrace-your-fallibility.html#why-is-modern-data-analysis-difficult-to-do-well",
    "title": "2  Embrace Your Fallibility",
    "section": "2.2 Why is Modern Data Analysis Difficult to do Well?",
    "text": "2.2 Why is Modern Data Analysis Difficult to do Well?\nWorking with data has gotten tougher with time.\n\nData are larger on average. For example, The Billion Prices Project scraped prices from all around the world to build inflation indices (Cavallo and Rigobon 2016).\nComplex data collection efforts are more common. For example, (Chetty and Friedman 2019) have gained access to massive administrative data sets and used formal privacy to understand inter-generational mobility.\nOpen source packages that provide incredible functionality for free change over time.\nPapers like “The garden of forking paths: Why multiple comparisons can be a problem, even when there is no “fishing expedition” or “p-hacking” (Gelman and Loken 2013) and the research hypothesis was posited ahead of time∗” and “Why Most Published Research Findings Are False” (Ioannidis 2005) have motivated huge increases in transparency including focuses on pre-registration and computational reproducibility.\n\n\nThere is a growing realization that statistically significant claims in scientific publications are routinely mistaken. A dataset can be analyzed in so many different ways (with the choices being not just what statistical test to perform but also decisions on what data to exclude or exclude, what measures to study, what interactions to consider, etc.), that very little information is provided by the statement that a study came up with a p &lt; .05 result. The short version is that it’s easy to find a p &lt; .05 comparison even if nothing is going on, if you look hard enough—and good scientists are skilled at looking hard enough and subsequently coming up with good stories (plausible even to themselves, as well as to their colleagues and peer reviewers) to back up any statistically-significant comparisons they happen to come up with. ~ Gelman and Loken\n\nEven for simple analysis, we can ask ourselves an entire set of questions at the end of the analysis. Table 2.1 lists a few of these questions.\n\n\n\n\nTable 2.1: Opinionated Analysis Development\n\n\n\n\n\n\n\n\n\n\nOpinionated Analysis Development\n\n\nQuestion Addressed\n\n\n\n\nCan you re-run the analysis and get the same results?\n\n\nIf an external library you’re using is updated, can you still reproduce your original results?\n\n\nIf you change code, do you know which downstream code need to be re-executed?\n\n\nIf the data or code change but the analysis is not re-executed, will your analysis reflect that it is out-of-date?\n\n\nCan you re-run your analysis with new data and compare it to previous results?\n\n\nCan you surface the code changes that resulted in a different analysis results?\n\n\nCan a second analyst easily understand your code?\n\n\nCan you re-use logic in different parts of the analysis?\n\n\nIf you decide to change logic, can you change it in just one place?\n\n\nIf your code is not performing as expected, will you know?\n\n\nIf your data are corrupted, do you notice?\n\n\nIf you make a mistake in your code, will someone notice it?\n\n\nIf you are not using efficient code, will you be able to identify it?\n\n\nCan a second analyst easily contribute code to the analysis?\n\n\nIf two analysts are developing code simultaneously, can they easily combine them?\n\n\nCan you easily track next steps in your analysis?\n\n\nCan your collaborators make requests outside of meetings or email?\n\n\n\nParker, Hilary. n.d. “Opinionated Analysis Development.” https://doi.org/10.7287/peerj.preprints.3210v1.",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Embrace Your Fallibility</span>"
    ]
  },
  {
    "objectID": "02_embrace-your-fallibility.html#what-are-we-going-to-do-1",
    "href": "02_embrace-your-fallibility.html#what-are-we-going-to-do-1",
    "title": "2  Embrace Your Fallibility",
    "section": "2.3 What are we going to do?",
    "text": "2.3 What are we going to do?\nTable 2.2 groups these questions in analysis features and suggests opinionated approaches to each question.\n\n\n\n\nTable 2.2: Opinionated Analysis Development\n\n\n\n\n\n\n  \n    \n      Opinionated Analysis Development\n    \n    \n    \n      Opinionated Approach\n      Question Addressed\n    \n  \n  \n    \n      Reproducible and Auditable\n    \n    Executable analysis scripts\nCan you re-run the analysis and get the same results?\n    Defined dependencies\nIf an external library you’re using is updated, can you still reproduce your original results?\n    Watchers for changed code and data\nIf you change code, do you know which downstream code need to be re-executed?\n    Watchers for changed code and data\nIf the data or code change but the analysis is not re-executed, will your analysis reflect that it is out-of-date?\n    Version control (individual)\nCan you re-run your analysis with new data and compare it to previous results?\n    Version control (individual)\nCan you surface the code changes that resulted in a different analysis results?\n    Literate programming1\nCan a second analyst easily understand your code?\n    \n      Accurate Code\n    \n    Modular, tested, code\nCan you re-use logic in different parts of the analysis?\n    Modular, tested, code\nIf you decide to change logic, can you change it in just one place?\n    Modular, tested, code\nIf your code is not performing as expected, will you know?\n    Assertive testing of data, assumptions, and results\nIf your data are corrupted, do you notice?\n    Code review\nIf you make a mistake in your code, will someone notice it?\n    Code review\nIf you are not using efficient code, will you be able to identify it?\n    \n      Collaborative\n    \n    Version control (collaborative)\nCan a second analyst easily contribute code to the analysis?\n    Version control (collaborative)\nIf two analysts are developing code simultaneously, can they easily combine them?\n    Version control (collaborative)\nCan you easily track next steps in your analysis?\n    Version control (collaborative)\nCan your collaborators make requests outside of meetings or email?\n  \n  \n    \n      Source: Parker, Hilary. n.d. “Opinionated Analysis Development.” https://doi.org/10.7287/peerj.preprints.3210v1.\n    \n  \n  \n    \n      1 This was originally 'Code Review'",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Embrace Your Fallibility</span>"
    ]
  },
  {
    "objectID": "02_embrace-your-fallibility.html#how-are-we-going-to-do-this-1",
    "href": "02_embrace-your-fallibility.html#how-are-we-going-to-do-this-1",
    "title": "2  Embrace Your Fallibility",
    "section": "2.4 How are we going to do this?",
    "text": "2.4 How are we going to do this?\nTable 2.3 lists specific tools we can use to adopt each opinionated approach.\n\n\n\n\nTable 2.3: Opinionated Analysis Development\n\n\n\n\n\n\n  \n    \n      Opinionated Analysis Development\n    \n    \n    \n      Opinionated Approach\n      Question Addressed\n      Tool1\n    \n  \n  \n    \n      Reproducible and Auditable\n    \n    Executable analysis scripts\nCan you re-run the analysis and get the same results?\nCode first\n    Defined dependencies\nIf an external library you’re using is updated, can you still reproduce your original results?\n.renv\n    Watchers for changed code and data\nIf you change code, do you know which downstream code need to be re-executed?\nlibrary(targets)\n    Watchers for changed code and data\nIf the data or code change but the analysis is not re-executed, will your analysis reflect that it is out-of-date?\nlibrary(targets)\n    Version control (individual)\nCan you re-run your analysis with new data and compare it to previous results?\nGit\n    Version control (individual)\nCan you surface the code changes that resulted in a different analysis results?\nGit\n    Literate programming2\nCan a second analyst easily understand your code?\nQuarto\n    \n      Accurate Code\n    \n    Modular, tested, code\nCan you re-use logic in different parts of the analysis?\nWell-tested functions\n    Modular, tested, code\nIf you decide to change logic, can you change it in just one place?\nWell-tested functions\n    Modular, tested, code\nIf your code is not performing as expected, will you know?\nWell-tested functions\n    Assertive testing of data, assumptions, and results\nIf your data are corrupted, do you notice?\nlibrary(assertr)\n    Code review\nIf you make a mistake in your code, will someone notice it?\nGitHub\n    Code review\nIf you are not using efficient code, will you be able to identify it?\nlibrary(microbenchmark)\n    \n      Collaborative\n    \n    Version control (collaborative)\nCan a second analyst easily contribute code to the analysis?\nGitHub\n    Version control (collaborative)\nIf two analysts are developing code simultaneously, can they easily combine them?\nGitHub\n    Version control (collaborative)\nCan you easily track next steps in your analysis?\nGitHub\n    Version control (collaborative)\nCan your collaborators make requests outside of meetings or email?\nGitHub\n  \n  \n    \n      Source: Parker, Hilary. n.d. “Opinionated Analysis Development.” https://doi.org/10.7287/peerj.preprints.3210v1.\n    \n  \n  \n    \n      1 Added by Aaron R. Williams\n    \n    \n      2 This was originally 'Code Review'\n    \n  \n\n\n\n\n\n\n\n\n2.4.1 Bonus stuff!\nAdopting these opinionated approaches and tools promotes reproducible research. Adopting these opinionated approaches and tools also provides a bunch of great bonuses.\n\nReproducible analyses are easy to scale. Using tools we will cover, we created almost 4,000 county- and city-level websites.\nGitHub offers free web hosting for hosting books and web pages like the notes we’re viewing right now.\nQuarto makes it absurdly easy to build beautiful websites and PDFs. ## Roadmap\n\nFinally, we sort Table 2.3 into Table 9.1, which outlines the structure of the rest of the day.\n\n\n\n\nTable 2.4: Opinionated Analysis Development\n\n\n\n\n\n\n  \n    \n      Opinionated Analysis Development\n    \n    \n    \n      Opinionated Approach\n      Question Addressed\n      Tool1\n      Section1\n    \n  \n  \n    Executable analysis scripts\nCan you re-run the analysis and get the same results?\nCode first\nProject Organization\n    Literate programming\nCan a second analyst easily understand your code?\nQuarto\nLiterate Programming\n    Version control (individual)\nCan you re-run your analysis with new data and compare it to previous results?\nGit\nVersion Control\n    Version control (individual)\nCan you surface the code changes that resulted in a different analysis results?\nGit\nVersion Control\n    Code review\nIf you make a mistake in your code, will someone notice it?\nGitHub\nVersion Control\n    Version control (collaborative)\nCan a second analyst easily contribute code to the analysis?\nGitHub\nVersion Control\n    Version control (collaborative)2\nIf two analysts are developing code simultaneously, can they easily combine them?\nGitHub\nVersion Control\n    Version control (collaborative)\nCan you easily track next steps in your analysis?\nGitHub\nVersion Control\n    Version control (collaborative)\nCan your collaborators make requests outside of meetings or email?\nGitHub\nVersion Control\n    Modular, tested, code\nCan you re-use logic in different parts of the analysis?\nWell-tested functions\nProgramming\n    Modular, tested, code\nIf you decide to change logic, can you change it in just one place?\nWell-tested functions\nProgramming\n    Modular, tested, code\nIf your code is not performing as expected, will you know?\nWell-tested functions\nProgramming\n    Assertive testing of data, assumptions, and results\nIf your data are corrupted, do you notice?\nlibrary(assertr)\nProgramming\n    Defined dependencies\nIf an external library you’re using is updated, can you still reproduce your original results?\n.renv\nEnvironment Management\n  \n  \n    \n      Source: Parker, Hilary. n.d. “Opinionated Analysis Development.” https://doi.org/10.7287/peerj.preprints.3210v1.\n    \n  \n  \n    \n      1 Added by Aaron R. Williams\n    \n    \n      2 This was originally 'Code Review'\n    \n  \n\n\n\n\n\n\n\nThe day roughly follows the process for setting up a reproducible data analysis.\n\nProject organization will cover how to organize all of the files of a data analysis so they are clear and so they work well with other tools.\nLiterate programming will cover Quarto, which will allow us to combine narrative text, code, and the output of code into clear artifacts of our data analysis.\nVersion control will cover Git and GitHub. These will allow us to organize the process of reviewing and merging code.\nIn programming, we’ll discuss best practices for writing code for data analysis like writing modular, well-tested functions and assertive testing of data, assumptions, and results.\n\nEnvironment management will cover .renv and the process of managing package dependencies while using open-source code.\nIf we have time, we can discuss how a positive climate and ethical practices can improve transparency and strengthen science.\n\n\n\n\n\nCavallo, Alberto, and Roberto Rigobon. 2016. “The Billion Prices Project: Using Online Prices for Measurement and Research.” Journal of Economic Perspectives 30 (2): 151–78. https://doi.org/10.1257/jep.30.2.151.\n\n\nChetty, Raj, and John N. Friedman. 2019. “A Practical Method to Reduce Privacy Loss When Disclosing Statistics Based on Small Samples.” AEA Papers and Proceedings 109 (May): 414–20. https://doi.org/10.1257/pandp.20191109.\n\n\nDekker, Sidney. 2014. The Field Guide to Understanding ’Human Error’. Third edition. Farnham, Surrey, England ; Burlington, VT, USA: Ashgate.\n\n\nGelman, Andrew, and Eric Loken. 2013. “The Garden of Forking Paths: Why Multiple Comparisons Can Be a Problem, Even When There Is No ‘Fishing Expedition’ or ‘p-Hacking’ and the Research Hypothesis Was Posited Ahead of Time.”\n\n\nIoannidis, John P. A. 2005. “Why Most Published Research Findings Are False.” PLoS Medicine 2 (8): e124. https://doi.org/10.1371/journal.pmed.0020124.\n\n\nParker, Hilary. n.d. “Opinionated Analysis Development.” https://doi.org/10.7287/peerj.preprints.3210v1.",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Embrace Your Fallibility</span>"
    ]
  },
  {
    "objectID": "03_project-organization.html",
    "href": "03_project-organization.html",
    "title": "3  Project Organization",
    "section": "",
    "text": "1. Code First\nSource: Qr189\nThe Great British Bake Off (GBBO) is a popular show about a baking competition in Great Britain. Each week contestants compete in a three-round baking competition. The second round is always the technical challenge, where bakers try to finish a challenging bake with intentionally vague instructions. Data analysis should never feel like a technical round from the GBBO.\nOur analyses should be captured from start to finish by a script or scripts. If we think of a script as a recipe, we want to capture every step from buying the ingredients for a bake all the way to how we put the bake on the table. Ideally, we want to capture every step with code.\nThis desire should influence our tool selection. Point-and-click tools like Excel, Tableau, and Power BI are widely used but fall short of this simple standard. Instead, we should use programming languages with robust functionality.\nHow we use these programming languages matters! R and Python are powerful because they support interactive data analysis that works well with the development and testing of hypotheses. The uncleaned results of interactive data analysis are rarely reproducible. Rather, we need to clean up our scripts so they run from start to finish without intervention (executable) and achieve all of the objectives of our final analysis.\nProprietary tools like SAS and Stata can be used for reproducible workflows! I have a personal preference for R, Python, and Julia because they are open source and promote accessibility because they don’t cost any money for users. R and Python used to be much tougher to use. Now they are supported by Integrated Development Environments (IDE) like RStudio, Positron, and VS Code.\nAdopting a code-first approach to data analysis creates many benefits!\nWe’ll cover more programming concepts later. For now, let’s focus on three.\nif (!file.exists(\"data/data.csv\")) {\n\n  download.file(url = \"web-url.csv\", destfile = \"data/data.csv\")\n\n}\nDuring development, it’s easy to run lines of code out of order or to skip capturing an important step like loading a package or dropping that pesky outlier. Restarting your computing environment early and often can promote good practices and ensure accountability. This is easy in RStudio using Session &gt; Restart R.",
    "crumbs": [
      "Project Organization",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Project Organization</span>"
    ]
  },
  {
    "objectID": "03_project-organization.html#code-first",
    "href": "03_project-organization.html#code-first",
    "title": "3  Project Organization",
    "section": "",
    "text": "Code maximizes the chance of catching mistakes when they inevitably happen.\nCode is the clearest way to document and share an analysis.\nReproducible code creates a single source of truth. Any result can be mapped back to the code and data that created the result.\nCode allows for robust version control.\nCode can scale analyses to bigger data and bigger projects.\n\n\n\nLoad external dependencies at the top of an analysis.\nWhen possible, gather your data using code. Many data sets can be accessed through application programming interface (API). For example, if you run a data collection using Qualtrics use the Qualtrics API instead of point-and-clicking to download the data from the website. With R, it’s possible to download data with download.file(). I don’t recommend downloading the data every time you run your analysis. Instead, download the data only if the data aren’t present.\n\n\n\nFinally, capture outputs with code. It’s so tempting to jump into a tool like Excel but this undermines our objectives. library(ggplot2) is powerful for data visualizations and library(gt) is powerful for tables.",
    "crumbs": [
      "Project Organization",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Project Organization</span>"
    ]
  },
  {
    "objectID": "03_project-organization.html#project-oriented-workflow",
    "href": "03_project-organization.html#project-oriented-workflow",
    "title": "3  Project Organization",
    "section": "2. Project-Oriented Workflow",
    "text": "2. Project-Oriented Workflow\nWe will use a project-oriented workflow.\n\n3.0.1 R Projects\nR Projects, proper noun, are the best way to organize an analysis. They have several advantages:\n\nThey make it possible to concurrently run multiple RStudio sessions.\nThey allow for project-specific RStudio settings.\nThey integrate well with Git version control.\nThey are the “node” of relative file paths. (more on this in a second) This makes code highly portable.\n\n\n\n\n\n\n\nExercise 1\n\n\n\nBefore setting up an R Project, go to Tools &gt; Global Options and uncheck “Restore most recently opened project at startup”.\n\n\nEvery new analysis in R should start with an R Project. First, create a directory that holds all data, scripts, and files for the analysis. You can do this right in RStudio by clicking the “New Folder” button at the top of the “Files” tab located in the top or bottom right of RStudio. Storing files and data in a sub-directories is encouraged. For example, data can be stored in a folder called data/.\nNext, click “New Project…” in the top right corner.\n\nWhen prompted, turn your recently created “Existing Directory” into a project.\n\nUpon completion, the name of the R Project should now be displayed in the top right corner of RStudio where it previously displayed “Project: (None)”. Once opened, .RProj files do not need to be saved. Double-clicking .Rproj files in the directory is now the best way to open RStudio. This will allow for the concurrent use of multiple R sessions and ensure the portability of file paths. Once an RStudio project is open, scripts can be opened by double-clicking individual files in the computer directory or clicking files in the “Files” tab.\n\n\n\n\n\n\nExercise 2\n\n\n\nLet’s walk through this process and create an R project for this training.\n\n\n\n\n3.0.2 Filepaths\nWindows file paths are usually delimited with \\. *nix file paths are usually delimited with /. Never use \\ in file paths in R. \\ is an escape character in R and will complicate an analysis. Fortunately, RStudio understands / in file paths regardless of operating system.\nNever use setwd() in R. It is unnecessary, it makes code unreproducible across machines, and it is rude to collaborators. R Projects create a better framework for file paths. Simply treat the directory where the R Project lives as the working directory and directories inside of that directory as sub-directories.\nFor example, say there’s a .Rproj called starwars-analysis.Rproj in a directory called starwars-analysis/. If there is a .csv in that folder called jedi.csv, the file can be loaded with read_csv(\"jedi.csv\") instead of read_csv(\"H:/alena/analyses/starwars-analysis/jedi.csv\"). If that file is in a sub-directory of starwars-analysis called data, it can be loaded with read_csv(\"data/jedi.csv\"). The same concepts hold for writing data and graphics.\nThis simplifies code and makes it portable because all relative file paths will be identical on all computers. To share an analysis, simply send the entire directory to a collaborator or share it with GitHub.\nHere’s an example directory:",
    "crumbs": [
      "Project Organization",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Project Organization</span>"
    ]
  },
  {
    "objectID": "03_project-organization.html#documentation",
    "href": "03_project-organization.html#documentation",
    "title": "3  Project Organization",
    "section": "3. Documentation",
    "text": "3. Documentation\nHumans are frequently the most expensive part of any data analysis. Documentation is essential to helping humans quickly and clearly understand the structure and steps of an analysis.\nNext, we’ll discuss commenting and READMEs.\n\n3.0.3 Comments\nComments are important for adding in-the-weeds context for code. R will interpret all text in a .R script as R code unless the code follows #, the comment symbol. Comments are essential to writing clear code in any programming language.\n\n# Demonstrate the value of a comment and make a simple calculation\n2 + 2\n\nIt should be obvious what a line of clear R code accomplishes. It isn’t always obvious why a clear line of R code is included in a script. Comments should focus on the why of R code and not the what of R code.\nThe following comment isn’t useful because it just restates the R code, which is clear:\n\n# divide every value by 1.11\ncost / 1.11\n\nThe following comment is useful because it adds context to the R code:\n\n# convert costs from dollars to Euros using the 2020-01-13 exchange rate\ncost / 1.11\n\nThe following is useful because it avoids magic numbers.\n\n# dollars to Euros 2020-01-13 exchange rate\nexchange_rate &lt;- 1.11\n\n# convert costs from dollars to Euros\ncost / exchange_rate\n\n\n\n3.0.4 README\nREADME’s are useful for providing big-picture context and instructions for a project. We will always include READMEs as a README.md file in the top level of our project directory. File ending in .md are Markdown files.\nREADMEs should contain big-picture documentation for a project. Sections can include:\n\nBrief project description\nInstructions for contributions\nCodes of conduct\nInstructions for reproduction\nLicenses\nExamples\n\nHere are a few examples:\n\nBoosting Upward Mobility from Poverty\nCode and results for ‘The Association between Income and Life Expectancy in the United States, 2001-2014’\nStyle Guide for ‘The Association between Income and Life Expectancy in the United States, 2001-2014’\n\n\n\n\n\n\n\nExercise 3\n\n\n\n\nAdd a README.md to the top level of your project directory.\nAdd a name for your project prefaced by # and add your name.\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nWe should now have a project directory with a .Rproj and a README.",
    "crumbs": [
      "Project Organization",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Project Organization</span>"
    ]
  },
  {
    "objectID": "04_quarto.html",
    "href": "04_quarto.html",
    "title": "4  Quarto",
    "section": "",
    "text": "4.1 Literate (Statistical) Programming\nAccording to Donald Knuth:",
    "crumbs": [
      "Literate Programming",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Quarto</span>"
    ]
  },
  {
    "objectID": "04_quarto.html#literate-statistical-programming",
    "href": "04_quarto.html#literate-statistical-programming",
    "title": "4  Quarto",
    "section": "",
    "text": "Source: Jacob Applebaum\n\n\n\n\nLet us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do. ~ (Knuth 1984)\n\n\n4.1.1 Example\nWe used a linear model because there is reason to believe that the population model is linear. The observations are independent and the errors are independently and identically distributed with an approximately normal distribution.\n\nmodel1 &lt;- lm(formula = dist ~ speed, data = cars)\n\nmodel1\n\n\nCall:\nlm(formula = dist ~ speed, data = cars)\n\nCoefficients:\n(Intercept)        speed  \n    -17.579        3.932  \n\n\nAn increase in travel speed of one mile per hour is associated with a 3.93 foot increase in stopping distance on average.",
    "crumbs": [
      "Literate Programming",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Quarto</span>"
    ]
  },
  {
    "objectID": "04_quarto.html#quarto",
    "href": "04_quarto.html#quarto",
    "title": "4  Quarto",
    "section": "4.2 Quarto",
    "text": "4.2 Quarto\nQuarto is a literate statistical programming tool for R, Julia, Python, JavaScript, and more that was released by Posit in 2022. Quarto is an important tool for reproducible research. It combines narrative text with styles, code, and the output of code and can be used to create many types of documents including PDFs, html websites, slides, and more.\nQuarto builds on the success of R Markdown. In fact, Quarto will Render R Markdown (.Rmd) documents without any edits or changes.\nJupyter (Julia, Python, and R) is a competing framework that is popular for Python but has not caught on for R.\nAccording to Wickham and Grolemund (2016) Chapter 27, there are three main reasons to use R Markdown (they hold for Quarto) :\n\n\n“For communicating to decision makers, who want to focus on the conclusions, not the code behind the analysis.”\n“For collaborating with other data scientists (including future you!), who are interested in both your conclusions, and how you reached them (i.e. the code).”\n“As an environment in which to do data science, as a modern day lab notebook where you can capture not only what you did, but also what you were thinking.”\n\n\nQuarto uses\n\nplain text files ending in .qmd that are similar to .R files.\nlibrary(knitr).\npandoc.1\n\nQuarto calls library(knitr) and “knits” .qmd (Quarto files) into .md (Markdown files), which Pandoc then converts into any specified output type. Quarto and library(knitr) don’t need to be explicitly loaded, and the entire process is handled by clicking the “Render” button in RStudio.\n\nSource: Quarto website\nClicking the “Render” button starts this process.\n\nQuarto, library(knitr), and Pandoc are all installed with RStudio.2\nThe “Render” workflow has a few advantages:\n\nAll code is rerun in a clean environment when “Rendering”. This ensures that the code runs in order and is reproducible.\nIt is easier to document code than with inline comments.\nThe output types are really appealing. By creating publishable documents with code, there is no need to copy-and-paste or transpose results.\nThe process is iterable and scalable.\n\n\n\n\n\n\n\nExercise 1\n\n\n\n\nClick the new script button and add a “Quarto Document”.\nGive the document a name, an author, and ensure that HTML is selected.\nSave the document as “hello-quarto.qmd”.\nClick “Render”.",
    "crumbs": [
      "Literate Programming",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Quarto</span>"
    ]
  },
  {
    "objectID": "04_quarto.html#three-ingredients-in-a-.qmd",
    "href": "04_quarto.html#three-ingredients-in-a-.qmd",
    "title": "4  Quarto",
    "section": "4.3 Three Ingredients in a .qmd",
    "text": "4.3 Three Ingredients in a .qmd\n\nYAML header\nMarkdown text\nCode chunks\n\n\n4.3.1 1. YAML header\nYAML stands for “yet another markup language.” The YAML header contains meta information about the document including output type, document settings, and parameters that can be passed to the document. The YAML header starts with --- and ends with ---.\nHere is the simplest YAML header for a PDF document:\n---\nformat: html\n---\nYAML headers can contain many output specific settings. This YAML header creates an HTML document with code folding and a floating table of contents:\n---\nformat: \n  html:\n    code-fold: true\n    toc: true\n---  \n\n\n\n\n\n\nExercise 2\n\n\n\n\nAdd embed-sources: true to your YAML header.\nUpdate the html line to look like:\n\n---\nembed-resources: true\nformat: \n  html:\n    code-fold: true\n---  \n\n\n\n\n4.3.2 2. Markdown text\nMarkdown is a shortcut for Hyper Text Markup Language (HTML). Essentially, simple meta characters corresponding to formatting are added to plain text.\nTitles and subtitltes\n------------------------------------------------------------\n\n# Title 1\n\n## Title 2\n\n### Title 3\n\n\nText formatting \n------------------------------------------------------------\n\n*italic*  \n\n**bold**   \n\n`code`\n\nLists\n------------------------------------------------------------\n\n* Bulleted list item 1\n* Item 2\n  * Item 2a\n  * Item 2b\n\n1. Item 1\n2. Item 2\n\nLinks and images\n------------------------------------------------------------\n\n[text](http://link.com)\n\n\n\n\n\n\nExercise 3\n\n\n\n\nAdd text with formatting like headers and bold to your Quarto document.\nRender!\n\n\n\n\n\n4.3.3 3. Code chunks\n\nMore frequently, code is added in code chunks:\n\n```{r}\n2 + 2\n```\n\n[1] 4\n\n\nThe first argument inline or in a code chunk is the language engine. Most commonly, this will just be a lower case r. knitr allows for many different language engines:\n\nR\nJulia\nPython\nSQL\nBash\nRcpp\nStan\nJavascript\nCSS\n\nQuarto has a rich set of options that go inside of the chunks and control the behavior of Quarto.\n\n```{r}\n#| eval: false\n\n2 + 2\n```\n\nIn this case, eval makes the code not run. Other chunk-specific settings can be added inside the brackets. Here3 are the most important options:\n\n\n\nOption\nEffect\n\n\n\n\necho: false\nHides code in output\n\n\neval: false\nTurns off evaluation\n\n\noutput: false\nHides code output\n\n\nwarning: false\nTurns off warnings\n\n\nmessage: false\nTurns off messages\n\n\nfig-height: 8\nChanges figure width in inches4\n\n\nfig-width: 8\nChanges figure height in inches5\n\n\n\nDefault settings for the entire document can be changed in the YAML header with the execute option:\nexecute:\n  warning: false\n\n\n\n\n\n\nExercise 4\n\n\n\n\nAdd a code chunk.\nLoad the storms data set.\nFilter the data to only include hurricanes.\nMake a data visualization with ggplot2 using the data from\nInclude an option to hide the R code.\nRender!",
    "crumbs": [
      "Literate Programming",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Quarto</span>"
    ]
  },
  {
    "objectID": "04_quarto.html#organizing-a-quarto-document",
    "href": "04_quarto.html#organizing-a-quarto-document",
    "title": "4  Quarto",
    "section": "4.4 Organizing a Quarto Document",
    "text": "4.4 Organizing a Quarto Document\nIt is important to clearly organize a Quarto document and the constellation of files that typically support an analysis.\n\nAlways use .Rproj files.\nUse sub-directories to sort images, .css, data.",
    "crumbs": [
      "Literate Programming",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Quarto</span>"
    ]
  },
  {
    "objectID": "04_quarto.html#outputs",
    "href": "04_quarto.html#outputs",
    "title": "4  Quarto",
    "section": "4.5 Outputs",
    "text": "4.5 Outputs\nThe Quarto gallery contains many example outputs.\n\n4.5.1 HTML Notebooks and Reports\n\n\n\n\n\n\n.html Quarto is an ideal format for notebooks and reports. It has flexible functionality and it avoids page breaks, which are a momentum kill.\n\n\n\n---\nformat: html\n---\n\nA Quarto Page Layout Example\n\n\n\n4.5.2 PDF Notebooks, Reports, and Journal Articles\n\n\n\n\n\n\n.pdf Quarto is the ideal format for printing. Several major academic journals provide templates for publishing directly from Quarto.\n\n\n\n---\nformat: pdf\n---\n\nThis blog details how Cameron Patrick wrote their PhD thesis in Quarto.\n\n\n\n4.5.3 MS Word Reports\n\n\n\n\n\n\n.docx Quarto works but lacks functionality for precise formatting. This page outlines the formatting options.\n\n\n\n---\nformat: docx\n---\n\n\n4.5.4 Presentations\n\n\n\n\n\n\nQuarto can render awesome slide decks using RevealJS, Beamer, and PowerPoint.\n\n\n\n\nformat:\n  revealjs:\n    css: styles.css\n    incremental: true\n    reveal_options:\n      slideNumber: true\n      previewLinks: true\n---\n\nPop Songs and Political Science\nR + Quarto: How we developed a pipeline to create &gt;3500 html factsheets\n\n\n\n4.5.5 Websites\n\n\n\n\n\n\nQuarto is excellent for building websites from multiple .qmd documents. It is easy to host these websites for free using GitHub pages.\n\n\n\n\nR at the Urban Institute website\nReproducibility at Urban\n\n\n\n4.5.6 Books\n\nBookdown is an R package by Yihui Xie for authoring books in R Markdown. Many books, including the first edition of R for Data Science (Wickham and Grolemund 2016), have been written in Quarto.\nQuarto book replaces bookdown. It is oriented around Quarto projects. The second edition of R for Data Science (Wickham, Çetinkaya-Rundel, and Grolemund 2023) was written in Quarto.\n\n\nData Science for Public Policy\n\n\n\n4.5.7 GitHub README\n\n\n\n\n\n\nQuarto can render .md documents that work well as READMEs for GitHub and GitLab. This is useful for including code and code output in the README.\n\n\n\n---\nformat: gfm\n---\n\nurbnthemes\nsyntheval\n\n\n\n4.5.8 Fact Sheets and Fact Pages\nAn alternative to rendering a Quarto document with the Render button is to use the quarto::render() function. This allows for iterating the rendering of documents which is particularly useful for the development of fact sheets and fact pages. The next chapter of the book expands on this use case.\n\nThe Urban Institute State and Local Finance Initiative creates State Fiscal Briefs by iterating R Markdown documents.\nData@Urban",
    "crumbs": [
      "Literate Programming",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Quarto</span>"
    ]
  },
  {
    "objectID": "04_quarto.html#conclusion",
    "href": "04_quarto.html#conclusion",
    "title": "4  Quarto",
    "section": "4.6 Conclusion",
    "text": "4.6 Conclusion\nQuarto is an updated version of R Markdown that can handle not only R but also Python and Julia code (among other languages). Quarto combines a yaml header, markdown text, and code chunks. It can be used in a variety of settings to create technical documents and presentations. We love Quarto and hope you will learn to love it too!\n\n4.6.1 Suggestions\n\nRender early, and render often.\nSelect the gear to the right of “Render” and select “Chunk Output in Console”\nLearn math mode. Also, library(equatiomatic) (CRAN, GitHub) is amazing.\n\n\n\n4.6.2 Resources\n\nQuarto intro\nR4DS R Quarto chapter\nHappy Git R Markdown tutorial\n\n\n\n\n\nKnuth, D. E. 1984. “Literate Programming.” The Computer Journal 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for data science: import, tidy, transform, visualize, and model data. 2nd edition. Beijing Boston Farnham Sebastopol Tokyo: O’Reilly.\n\n\nWickham, Hadley, and Garrett Grolemund. 2016. R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. First edition. Sebastopol, CA: O’Reilly.",
    "crumbs": [
      "Literate Programming",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Quarto</span>"
    ]
  },
  {
    "objectID": "04_quarto.html#footnotes",
    "href": "04_quarto.html#footnotes",
    "title": "4  Quarto",
    "section": "",
    "text": "Pandoc is free software that converts documents between markup formats. For example, Pandoc can convert files to and from markdown, LaTeX, jupyter notebook (.ipynb), and Microsoft Word (.docx) formats, among many others. You can see a comprehensive list of files Pandoc can convert on their About Page.↩︎\nRendering to PDF requires a LaTeX distribution. Follow these instructions to install library(tinytex) if you want to make PDF documents.↩︎\nThis table was typed as Markdown code. But sometimes it is easier to use a code chunk to create and print a table. Pipe any data frame into knitr::kable() to create a table that will be formatted in the output of a rendered Quarto document.↩︎\nThe default dimensions for figures change based on the output format. Visit here to learn more.↩︎\nThe default dimensions for figures change based on the output format. Visit here to learn more.↩︎",
    "crumbs": [
      "Literate Programming",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Quarto</span>"
    ]
  },
  {
    "objectID": "05_advanced-quarto.html",
    "href": "05_advanced-quarto.html",
    "title": "5  Advanced Quarto",
    "section": "",
    "text": "5.1 Introduction\nThis set of notes introduces advanced Quarto concepts including params and embed-resources YAML headers, mathematical notation, cross references, and citations. The Quarto website includes more gems and is an example of high-quality technical documentation.",
    "crumbs": [
      "Literate Programming",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Advanced Quarto</span>"
    ]
  },
  {
    "objectID": "05_advanced-quarto.html#yaml-headers",
    "href": "05_advanced-quarto.html#yaml-headers",
    "title": "5  Advanced Quarto",
    "section": "5.2 YAMl Headers",
    "text": "5.2 YAMl Headers\n\n5.2.1 execute\nMost options that change the behavior of code chunks can be set for all code chunks in a document using execute in the YAML header.\nFor example, if we want to turn off warnings for the entire document, we can include\nexecute:\n  warning: false\nHere are some of the most useful options:\n\n\n\nOption\nEffect\n\n\n\n\necho: false\nHides code in output\n\n\neval: false\nTurns off evaluation\n\n\noutput: false\nHides code output\n\n\nwarning: false\nTurns off warnings\n\n\nmessage: false\nTurns off messages\n\n\nfig-height: 8\nChanges figure width in inches\n\n\nfig-width: 8\nChanges figure height in inches\n\n\n\n\n\n5.2.2 params\nQuarto documents have YAML headers, which can contain many output specific settings. This YAML header creates an HTML document with code folding and a floating table of contents:\n---\nformat: \n  html:\n    embed-resources: true\n    code-fold: true\n    toc: true\n---  \nOne key specification in the YAML header are parameters or params. Here is an example:\n---\nformat: html\nparams:\n  state: \"Virginia\"\n---\nNow state can be referred to anywhere in R code as params$state.\nParameters are useful for a couple of reasons:\n\nWe can clearly change key values for a Quarto document in the YAML header. This could be a useful place to define constants and avoid magic numbers.\nWe can create a template and programmatically iterate the template over a set of values with the quarto_render() function and library(purrr). This blog describes the idea and provides example code! The Mobility Metrics Data Tables and SLFI State Fiscal Briefs are key examples of this workflow. The code to create the Mobility Metrics Data Tables is publicly available on Github.\n\n\n\n5.2.3 embed-resources\n\n\n\n\n\n\nWarning\n\n\n\nUnlike R Markdown, images and other content are not embedded in .html from Quarto by default. Be sure to include embed-resources: true in YAML headers to embed content and make documents easier to share.\nSuppose we embed an image called image.png in a Quarto document called example.qmd, which, when rendered, creates example.html. If we don’t include embed-resources: true, then we will need to share image.png and example.html to see the embedded image. This is also true for other files like .css which is useful to provide custom styling for websites.\n\n\n\n\n\n\n\n\nExercise 1\n\n\n\n\nIn the hello-quarto.qmd file you previously created, add date: today to your YAML header after title. This will update every time the document is rendered.",
    "crumbs": [
      "Literate Programming",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Advanced Quarto</span>"
    ]
  },
  {
    "objectID": "05_advanced-quarto.html#sections",
    "href": "05_advanced-quarto.html#sections",
    "title": "5  Advanced Quarto",
    "section": "5.3 Sections",
    "text": "5.3 Sections\nThe Markdown text for creating headers is important for visual styles, section numbering, tables of contents, and cross references.\n# Section Header {#sec-one}\n\n## Subsection Header {#sec-two}\n\n### Minor Section Header {#sec-three}\nThe extra syntax to the right of the section is necessary for cross references.",
    "crumbs": [
      "Literate Programming",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Advanced Quarto</span>"
    ]
  },
  {
    "objectID": "05_advanced-quarto.html#figures-and-visualizations",
    "href": "05_advanced-quarto.html#figures-and-visualizations",
    "title": "5  Advanced Quarto",
    "section": "5.4 Figures and Visualizations",
    "text": "5.4 Figures and Visualizations\n\n5.4.1 Figures\nQuarto has powerful tools for including images. It also includes native tools for adding alt text directly to images. For example, the following code generates the subsequent image:\n![stenomylus](images/Stenomylus.jpg){#fig-stenomylus fig-alt=\"A sketch of two stenomylus.\"}\n\n\n\n\n\n\nFigure 5.1: stenomylus\n\n\n\nQuarto also allows for easily laying out multiple figures.\n:::{#fig-camels-combo layout-ncol=2}\n\n![stenomylus](images/Stenomylus.jpg){#fig-stenomylus}\n\n![Hanno](images/camels.jpeg){#fig-camels}\n\nStenomylus and Camels\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n(a) stenomylus\n\n\n\n\n\n\n\n\n\n\n\n(b) Hanno\n\n\n\n\n\n\n\nFigure 5.2: Stenomylus and Camels\n\n\n\n\n\n5.4.2 Data Visualization\nQuarto works well with library(ggplot2). Consider an examples using the cars dataset, which contains speed and dist for 50. Figure 5.3 shows two histograms displaying the distributions of speed and dist individually.\nggplot(cars, aes(x = speed)) +\n  geom_histogram(bins = 15) +\n  labs(title = \"Histogram of speeds\")\n\nggplot(cars, aes(x = dist)) +\n  geom_histogram(bins = 15) +\n  labs(title = \"Histogram of distances\")\n\n\n\n\n\n\n\n\n\n\n\n(a) Histogram of speeds\n\n\n\n\n\n\n\n\n\n\n\n(b) Histogram of dists\n\n\n\n\n\n\n\nFigure 5.3: Histograms of individual variables\n\n\n\nFigure 5.4 displays the relationship between these two variables in a scatterplot.\n\ncars |&gt;\n  ggplot(aes(x = speed, y = dist)) +\n  geom_point(alpha = 0.3) +\n  labs(title = \"Cars Traveling at Higher Speeds Take Longer to Stop\") +\n  scatter_grid()\n\n\n\n\n\n\n\nFigure 5.4: Scatterplot of speed vs. distances\n\n\n\n\n\n\n\n5.4.3 Data Tables\nThe default for df-print is kable. This is the only type of table that works with the table references. kable works well until there is tons of data, where paged thrives.\nTable 5.1 displays basic summary statistics for these two variables.\n\ncars |&gt;\n  summarise(\n    `Median speed` = median(speed),\n    `IQR speed` = IQR(speed),\n    `Median dist` = median(dist),\n    `IQR dist` = IQR(dist),\n    `Correlation, r` = cor(speed, dist)\n  ) |&gt;\n  kable(digits = c(0, 0, 0, 0, 2))\n\n\n\nTable 5.1: Summary statistics for speed and dist (kable)\n\n\n\n\n\n\nMedian speed\nIQR speed\nMedian dist\nIQR dist\nCorrelation, r\n\n\n\n\n15\n7\n36\n30\n0.81\n\n\n\n\n\n\n\n\n\n\n5.4.4 Diagrams\nQuarto has access to Mermaid and Graphviz for creating diagrams. Here is a simple example from the Quarto documentation:\n\n\n\n\n\nflowchart LR\n  A[Hard edge] --&gt; B(Round edge)\n  B --&gt; C{Decision}\n  C --&gt; D[Result one]\n  C --&gt; E[Result two]",
    "crumbs": [
      "Literate Programming",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Advanced Quarto</span>"
    ]
  },
  {
    "objectID": "05_advanced-quarto.html#sec-equations",
    "href": "05_advanced-quarto.html#sec-equations",
    "title": "5  Advanced Quarto",
    "section": "5.5 Equations",
    "text": "5.5 Equations\n\n5.5.1 First Model\nWe can fit a simple linear regression model of the form shown in Equation 5.1.\n\\[\ndist = \\hat{\\beta}_0 + \\hat{\\beta}_1 \\times speed + \\epsilon\n\\tag{5.1}\\]\nTable 5.2 shows the regression output for this model.\n\ndist_fit &lt;- lm(dist ~ speed, data = cars)\n  \ndist_fit |&gt;\n  tidy() |&gt;\n  kable(digits = c(0, 0, 2, 2, 2))\n\n\n\nTable 5.2: Linear regression model for predicting price from area\n\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n-18\n6.76\n-2.60\n0.01\n\n\nspeed\n4\n0.42\n9.46\n0.00\n\n\n\n\n\n\n\n\n\n\n5.5.2 Second Model\nLet’s fit a more complicated multiple linear regression model of the form shown in Equation 5.2.\n\\[\ndist = \\hat{\\beta}_0 + \\hat{\\beta}_1 \\times speed + \\hat{\\beta}_2 \\times speed ^ 2 + \\epsilon\n\\tag{5.2}\\]\nTable 5.3 shows the regression output for this model.\n\ndist_fit2 &lt;- lm(dist ~ poly(speed, degree = 2, raw = TRUE), data = cars)\n  \ndist_fit2 |&gt;\n  tidy() |&gt;\n  kable(digits = c(0, 0, 2, 2, 2))\n\n\n\nTable 5.3: Second linear regression model for predicting price from area\n\n\n\n\n\n\n\n\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n2\n14.82\n0.17\n0.87\n\n\npoly(speed, degree = 2, raw = TRUE)1\n1\n2.03\n0.45\n0.66\n\n\npoly(speed, degree = 2, raw = TRUE)2\n0\n0.07\n1.52\n0.14\n\n\n\n\n\n\n\n\n\n\n5.5.3 Math Mode\nUse $ to start and stop in-line math notation and $$ to start multi-line math notation. Math notation uses LaTeX’s syntax for mathematical notation.\nHere’s an example with in-line math:\nConsider a binomially distributed random variable, $X \\sim binom(n, p)$. \nConsider a binomially distributed random variable, \\(X \\sim binom(n, p)\\).\nHere’s an example with a chunk of math:\n$$\nP(X = x) = {n \\choose x} p ^ x (1 - p) ^ {n - x}\n$${#eq-binomial}\n\\[\nP(X = x) = {n \\choose x} p ^ x (1 - p) ^ {n - x}\n\\tag{5.3}\\]\n\n\n5.5.4 Important Syntax\nMath mode recognizes basic math symbols available on your keyboard including +, -, *, /, &gt;, &lt;, (, and ).\nMath mode contains all greek letters. For example, \\alpha (\\(\\alpha\\)) and \\beta (\\(\\beta\\)).\n\n\n\nTable 5.4: My Caption\n\n\n\n\n\nLaTeX\nSymbol\n\n\n\n\n\\alpha\n\\(\\alpha\\)\n\n\n\\beta\n\\(\\beta\\)\n\n\n\\gamma\n\\(\\gamma\\)\n\n\n\\Delta\n\\(\\Delta\\)\n\n\n\\epsilon\n\\(\\epsilon\\)\n\n\n\\theta\n\\(\\theta\\)\n\n\n\\pi\n\\(\\pi\\)\n\n\n\\sigma\n\\(\\sigma\\)\n\n\n\\chi\n\\(\\chi\\)\n\n\n\n\n\n\nMath mode also recognizes \\(\\log(x)\\) (\\log(x)) and \\(\\sqrt{x}\\) (\\sqrt{x}).\nSuperscripts (^) are important for exponentiation and subscripts (_) are important for adding indices. y = x ^ 2 renders as \\(y = x ^ 2\\) and x_1, x_2, x_3 renders as \\(x_1, x_2, x_3\\). Brackets are useful for multi-character superscripts and subscripts like \\(s_{11}\\) (s_{11}).\nIt is useful to add symbols to letters. For example, \\bar{x} is useful for sample means (\\(\\bar{x}\\)), \\hat{y} is useful for predicted values (\\(\\hat{y}\\)), and \\vec{\\beta} is useful for vectors of coefficients (\\(\\vec{\\beta}\\)).\nMath mode supports fractions with \\frac{x}{y} (\\(\\frac{x}{y}\\)), big parentheses with \\left(\\right) (\\(\\left(\\right)\\)), and brackets with \\left[\\right] (\\(\\left[\\right]\\)).\nMath mode has a symbol for summation. Let’s combine it with bars, fractions, subscripts, and superscipts to show sample mean \\bar{x} = \\frac{1}{n}\\sum_i^n x_i, which looks like \\(\\bar{x} = \\frac{1}{n}\\sum_i^n x_i\\).\n\\sim is how to add the tilde for distributed as. For example, X \\sim N(\\mu = 0, \\sigma = 1) shows the normal distribution \\(X \\sim N(\\mu = 0, \\sigma = 1)\\).\nMatrices are are a little bit more work in math mode. Consider the follow variance-covariance matrix:\n\\begin{bmatrix}\ns_{11}^2 & s_{12}\\\\\ns_{21} & s_{22}^2\n\\end{bmatrix}\n\\[\n\\begin{bmatrix}\ns_{11}^2 & s_{12}\\\\\ns_{21} & s_{22}^2\n\\end{bmatrix}\n\\]\nThis guide provides and exhaustive look at math options in Quarto.\n\n\n\n\n\n\nWarning\n\n\n\nMath mode is finicky! Small errors like mismatched parentheses or superscript and subscript errors will cause Quarto documents to fail to render. Write math carefully and render early and often.",
    "crumbs": [
      "Literate Programming",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Advanced Quarto</span>"
    ]
  },
  {
    "objectID": "05_advanced-quarto.html#sec-cross-references",
    "href": "05_advanced-quarto.html#sec-cross-references",
    "title": "5  Advanced Quarto",
    "section": "5.6 Cross references",
    "text": "5.6 Cross references\nThis document is littered with cross references. Cross references require labeling objects. For example:\n## Cross references {#sec-cross-references}\n\n$$\ndist = \\hat{\\beta}_0 + \\hat{\\beta}_1 \\times speed + \\epsilon\n$$ {#eq-slr}\nAfter labeling objects, simply reference the tags with @.\nThe numbers in cross references automatically update when additional referenced objects are added (e.g. a table is added before table 1).",
    "crumbs": [
      "Literate Programming",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Advanced Quarto</span>"
    ]
  },
  {
    "objectID": "05_advanced-quarto.html#tabset-panels",
    "href": "05_advanced-quarto.html#tabset-panels",
    "title": "5  Advanced Quarto",
    "section": "5.7 Tabset Panels",
    "text": "5.7 Tabset Panels\nTabset panels are a useful way to collapse related information.\n\nVisualizationTable\n\n\n\ncars |&gt;\n  ggplot(mapping = aes(x = speed, y = dist)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\ncars |&gt;\n  gt()\n\n\n\n\n\n\n\n\nspeed\ndist\n\n\n\n\n4\n2\n\n\n4\n10\n\n\n7\n4\n\n\n7\n22\n\n\n8\n16\n\n\n9\n10\n\n\n10\n18\n\n\n10\n26\n\n\n10\n34\n\n\n11\n17\n\n\n11\n28\n\n\n12\n14\n\n\n12\n20\n\n\n12\n24\n\n\n12\n28\n\n\n13\n26\n\n\n13\n34\n\n\n13\n34\n\n\n13\n46\n\n\n14\n26\n\n\n14\n36\n\n\n14\n60\n\n\n14\n80\n\n\n15\n20\n\n\n15\n26\n\n\n15\n54\n\n\n16\n32\n\n\n16\n40\n\n\n17\n32\n\n\n17\n40\n\n\n17\n50\n\n\n18\n42\n\n\n18\n56\n\n\n18\n76\n\n\n18\n84\n\n\n19\n36\n\n\n19\n46\n\n\n19\n68\n\n\n20\n32\n\n\n20\n48\n\n\n20\n52\n\n\n20\n56\n\n\n20\n64\n\n\n22\n66\n\n\n23\n54\n\n\n24\n70\n\n\n24\n92\n\n\n24\n93\n\n\n24\n120\n\n\n25\n85\n\n\n\n\n\n\n\n\n\n\n\n::: {.panel-tabset}\n\n## Section 1\n\nContent!\n\n## Section 2\n\nContent!\n\n:::",
    "crumbs": [
      "Literate Programming",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Advanced Quarto</span>"
    ]
  },
  {
    "objectID": "05_advanced-quarto.html#sec-callouts",
    "href": "05_advanced-quarto.html#sec-callouts",
    "title": "5  Advanced Quarto",
    "section": "5.8 Callouts",
    "text": "5.8 Callouts\n\n\n\n\n\n\nNote\n\n\n\nThis template is incomplete and we are always looking for help to expand it!\n\n\n\n\n\n\n\n\nWarning\n\n\n\nCaution, quarto is so powerful you may abandon LaTeX.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nReproducible work is a cornerstone of quality research. Quarto makes reproducible work easy and fun.\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nUse library(urbntemplates) to access Urban Institute quarto templates.\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\n\n\nQuarto may transform the way the Urban Institute communicates research.",
    "crumbs": [
      "Literate Programming",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Advanced Quarto</span>"
    ]
  },
  {
    "objectID": "05_advanced-quarto.html#sec-footnotes",
    "href": "05_advanced-quarto.html#sec-footnotes",
    "title": "5  Advanced Quarto",
    "section": "5.9 Footnotes",
    "text": "5.9 Footnotes\nHere is an inline note1, footnote2, and a much longer footnote.3\nLong notes can contain multiple paragraphs.\nThe notes are created with the following:\nHere is an inline note^[The tooltip is pretty cool!], footnote[^1], and a much longer footnote.[^longnote]\n\n[^1]: I suppose the footnotes are really more endnotes. \n\n[^longnote]: The longnote gives the ability to add very long footnotes. \n  \n  Long notes can contain multiple paragraphs. \n\nThe notes are created with the following:",
    "crumbs": [
      "Literate Programming",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Advanced Quarto</span>"
    ]
  },
  {
    "objectID": "05_advanced-quarto.html#citations",
    "href": "05_advanced-quarto.html#citations",
    "title": "5  Advanced Quarto",
    "section": "5.10 Citations",
    "text": "5.10 Citations\n\n5.10.1 Zotero\nZotero is a free and open-source software for organizing research and managing citations.\n\n\n\n\n\n\nDigital Object Identifier (DOI)\n\n\n\nDOIs are persistent identifiers that uniquely identify objects including many academic papers. For example, 10.1198/jcgs.2009.07098 identifies “A Layered Grammar of Graphics” by Hadley Wickham.\n\n\n\n\n\n\n\n\nExercise 1\n\n\n\n\nInstall Zotero.\nFind the DOI for “Tidy Data” by Hadley Wickham.\nClick the magic wand in Zotero and paste the DOI.\n\n\n\n\n\n\n\n\n\n\n\nReview the new entry in Zotero.\n\n\n\n\n\n5.10.2 Zotero Integration\nZotero has a powerful integration with Quarto. In practice, it’s one click to add a DOI to Zotero and then one click to add a citation to Quarto.\nRStudio automatically adds My Library from Zotero. Simply switch to the Visual Editor (top left in RStudio), click “Insert”, and click “Citation”. This will open a prompt to insert a citation into the Quarto document.\nThe citation is automatically added with parentheses to go at the end of sentences. Delete the square brackets to convert the citation to an in-line citation.\nInserting the citation automatically adds the citation to the references section. Deleting the reference automatically deletes the citation from the references section.\nZotero Groups are useful for sharing citations and Zotero Group Libraries need to be added to RStudio. To set this up:\nTo set this up, in RStudio:\n\nGo to Tools and select “Global Options”\nSelect “RMarkdown” and then click “Citations”\nFor “Use Libraries” choose “Selected Libraries”\nSelect the group libraries to add\n\n\n\n\n\n\n\nExercise 2\n\n\n\n\nCite “Tidy Data” by Hadley Wickham in your Quarto document.\nClick “Render”",
    "crumbs": [
      "Literate Programming",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Advanced Quarto</span>"
    ]
  },
  {
    "objectID": "05_advanced-quarto.html#html-styles",
    "href": "05_advanced-quarto.html#html-styles",
    "title": "5  Advanced Quarto",
    "section": "5.11 HTML Styles",
    "text": "5.11 HTML Styles\n\n5.11.1 Built-in Themes\nQuarto includes 25 themes that can be changes using the theme: option in a YAML header.\n\n\n5.11.2 Custom Themes\nSassy Cascading Style Sheets (.scss) files allow for programming styles. The 25 custom themes linked above are supported by .scss files that describe their style with code. The Urban Institute has an unofficial .scss file to put Quarto documents in the Urban style.\n.scss is the best way to change the overall style of .html output from Quarto.\n\n\n5.11.3 More Resources\n\nQuarto Guide\nIterating fact sheets and web pages with Quarto",
    "crumbs": [
      "Literate Programming",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Advanced Quarto</span>"
    ]
  },
  {
    "objectID": "05_advanced-quarto.html#footnotes",
    "href": "05_advanced-quarto.html#footnotes",
    "title": "5  Advanced Quarto",
    "section": "",
    "text": "The tooltip is pretty cool!↩︎\nI suppose the footnotes are really more endnotes.↩︎\nThe longnote gives the ability to add very long footnotes.↩︎",
    "crumbs": [
      "Literate Programming",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Advanced Quarto</span>"
    ]
  },
  {
    "objectID": "06_reproducible-research-with-git.html",
    "href": "06_reproducible-research-with-git.html",
    "title": "6  Reproducible Research with Git and GitHub",
    "section": "",
    "text": "6.1 Command Line\nThe command line (also known as shell or console) is a way of controlling computers without using a graphical user interface (i.e. pointing-and-clicking). The command line is useful because pointing-and-clicking is tough to reproduce or scale and because lots of useful software is only available through the command line. Furthermore, cloud computing often requires use of the command line.\nWe will run Bash, a command line program, using Terminal on Mac and Git Bash on Windows. Open Terminal like any other program on Mac. Right-click in a desired directory and select “Git Bash Here” to access Git Bash on Windows.\nFortunately, we only need to know a little Bash for version control with Git and cloud computing.\npwd - print working directory - prints the file path to the current location in the\nls - list - lists files and folders in the current working directory.\ncd - change directory - move the current working directory.\nmkdir - make directory - creates a directory (folder) in the current working directory.\ntouch - creates a text file with the provided name.\nmv - move - moves a file from one location to the other.\ncat - concatenate - concatenate and print a file.",
    "crumbs": [
      "Version Control",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Reproducible Research with Git and GitHub</span>"
    ]
  },
  {
    "objectID": "06_reproducible-research-with-git.html#command-line",
    "href": "06_reproducible-research-with-git.html#command-line",
    "title": "6  Reproducible Research with Git and GitHub",
    "section": "",
    "text": "Exercise 1\n\n\n\n\nCreate a new directory called cli-exercise.\nNavigate to this directory using cd in the Terminal or Git Bash.\nSubmit pwd to confirm you are in the correct directory.\n\n\n\n\n\n\n\n\n\nExercise 2\n\n\n\nUse the following code to create a new text document called haiku.txt in the working directory.\npwd\nls\ntouch haiku.txt\nls\n\n\n\n\n\n\n\n\nExercise 3\n\n\n\nUse following to add the haiku “The Old Pond” by Matsuo Basho to haiku.txt.\ncat haiku.txt\necho \"An old silent pond\" &gt;&gt; haiku.txt\ncat haiku.txt\necho \"A frog jumps into the pond-\" &gt;&gt; haiku.txt\necho \"Splash! Silence again.\" &gt;&gt; haiku.txt\necho \"~Matsuo Basho\" &gt;&gt; haiku.txt\ncat haiku.txt\n\n\n\n\n\n\n\n\nExercise 4\n\n\n\nUse the following code to move haiku.txt to a subdirectory called poems/.\nls\nmkdir poems\nls\nmv haiku.txt poems/haiku.txt\nls\ncat poems/haiku.txt\n\n\n\n6.1.1 Useful tips\n\nTab completion can save a ton of typing. Hitting tab twice shows all of the available options that can complete from the currently typed text.\nHit the up arrow to cycle through previously submitted commands.\nUse man &lt;command name&gt; to pull up help documentation. Hit q to exit.\nTyping .. refers to the directory above the working directory. Writing cd .. changes to the directory above the working directory.\nTyping just cd changes to the home directory.\n\n\n\n6.1.2 Programs\nWe can run programs from the command line. Commands from programs always start with the name of the program. Running git commands intuitively start with git. For example:\ngit init\ngit status",
    "crumbs": [
      "Version Control",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Reproducible Research with Git and GitHub</span>"
    ]
  },
  {
    "objectID": "06_reproducible-research-with-git.html#why-version-control",
    "href": "06_reproducible-research-with-git.html#why-version-control",
    "title": "6  Reproducible Research with Git and GitHub",
    "section": "6.2 Why version control?",
    "text": "6.2 Why version control?\nVersion control is a system for managing and recording changes to files over time. Version control is essential to managing code and analyses. Good version control can:\n\nLimit the chance of making a mistake\nMaximize the chance of catching a mistake when it happens\nCreate a permanent record of changes to code\nEasily undo mistakes by switching between iterations of code\nAllow multiple paths of development while protecting working versions of code\nEncourage communication between collaborators\nBe used for external communication",
    "crumbs": [
      "Version Control",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Reproducible Research with Git and GitHub</span>"
    ]
  },
  {
    "objectID": "06_reproducible-research-with-git.html#why-distributed-version-control",
    "href": "06_reproducible-research-with-git.html#why-distributed-version-control",
    "title": "6  Reproducible Research with Git and GitHub",
    "section": "6.3 Why distributed version control?",
    "text": "6.3 Why distributed version control?\nCentralized version control stores all files and the log of those files in one centralized location. Distributed version control stores files and logs in one or many locations and has tools for combining the different versions of files and logs.\nCentralized version control systems like Google Drive or Box are good for sharing a Microsoft Word document, but they are terrible for collaborating on code.\nDistributed version control allows for the simultaneous editing and running of code. It also allows for code development without sacrificing a working version of the code.",
    "crumbs": [
      "Version Control",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Reproducible Research with Git and GitHub</span>"
    ]
  },
  {
    "objectID": "06_reproducible-research-with-git.html#git-vs.-github",
    "href": "06_reproducible-research-with-git.html#git-vs.-github",
    "title": "6  Reproducible Research with Git and GitHub",
    "section": "6.4 Git vs. GitHub",
    "text": "6.4 Git vs. GitHub\nGit is a distributed version-control system for tracking changes in code. Git is free, open-source software and can be used locally without an internet connection. It’s like a turbo-charged version of Microsoft Word’s track changes for code.\nGitHub, which is owned by Microsoft, is an online hosting service for version control using Git. It also contains useful tools for collaboration and project management. It’s like a turbo-charged version of Google Drive or Box for sharing repositories created using Git.\nAt first, it’s easy to mix up Git and GitHub. Just try to remember that they are separate tools that complement each other well.",
    "crumbs": [
      "Version Control",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Reproducible Research with Git and GitHub</span>"
    ]
  },
  {
    "objectID": "06_reproducible-research-with-git.html#ssh-keys-for-authentication",
    "href": "06_reproducible-research-with-git.html#ssh-keys-for-authentication",
    "title": "6  Reproducible Research with Git and GitHub",
    "section": "6.5 SSH Keys for Authentication",
    "text": "6.5 SSH Keys for Authentication\nGitHub started requiring token-based or SSH-based authentication in 2021. We will focus on creating SSH keys for authentication. For instructions on creating a personal access token for authentication, see Section 6.10 below.\nWe will follow the instructions for setting up SSH keys using the console, or terminal window, from Jenny Bryan’s fantastic Happy Git with R.\n\n\n\n\n\n\nExercise 5\n\n\n\n\nFollow the instructions above for setting up SSH keys using the console. We recommend using the default key location and key name. You can choose whether or not to add a password for the key. Note that if you choose to add a password, you will need to enter that password every time you perform operations with GitHub - so make sure you’ll be able to remember it!\nWhen you get to the section of the instructions to provide the public key to GitHub, we recommend obtaining the public key as follows:\n\n\nIn a terminal window, run cat ~/.ssh/id_ed25519.pub\nHighlight the public key that is printed to the console and copy the text.\nFollow the instructions from Jenny Bryan at 10.5.3 to add the copied key to GitHub.",
    "crumbs": [
      "Version Control",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Reproducible Research with Git and GitHub</span>"
    ]
  },
  {
    "objectID": "06_reproducible-research-with-git.html#git-github-workflow",
    "href": "06_reproducible-research-with-git.html#git-github-workflow",
    "title": "6  Reproducible Research with Git and GitHub",
    "section": "6.6 Git + GitHub Workflow",
    "text": "6.6 Git + GitHub Workflow\nRepository: A collection of files, often a directory, where files are organized and logged by Git.\nGit and GitHub organize projects into repositories. Typically, a “repo” will correspond with the place where you started a .Rproj. When working with Git and GitHub, your files will exist in two places: locally on your computer and remotely on GitHub.\nWhen creating a new repository, you can use either of the following alternatives:\n\nInitialize the repo locally on your computer and later add the repo to GitHub\nInitialize the repo remotely on GitHub and then copy (clone) the repo to your computer.\n\nTo create a repository (only needs to be done once per project):\ngit init initializes a local Git repository.\nOR\ngit clone &lt;link&gt; copies a remote repository from GitHub to the location of the working directory on your computer.\n\n\n\n\n\n\nExercise 5\n\n\n\nWe’re going to create a repo remotely on GitHub and clone it to our computer.\n\nGo to GitHub.\nClick the big green “New” button.\nCall the repo first-repo. Select a public repository and check the box that says Add a README file.\nClick the “Create Repository” button.\nClick the green “Code” button and copy the SSH link.\nNavigate to your cli-exercise folder on the command line using cd. Run git clone &lt; link &gt;, where you replace &lt; link &gt; with the SSH link you copied. This will create a folder called first-repo with your repo files, including the README.md file you created when you initialized the repo.\n\nSee Section 6.11 for the instructions on initializing a repo locally and then adding to GitHub.\n\n\n\n6.6.1 Basic Approach\n\nInitialize a repository for a project (we’ve already done this!).\nTell Git which files to track. Track scripts. Avoid tracking data or binary files like .xlsx. 1\nTake a snapshot of tracked files and add a commit message.\nSave the tracked files to the remote GitHub repository.\nRepeat, repeat, repeat\n\n\n\n\n\n\n\n\n6.6.2 Commands\ngit status prints out all of the important information about your repo. Use it before and after most commands to understand how code changes your repo.\ngit add &lt;file-name&gt; adds a file to staging. It says, “hey look at this!”.\ngit commit -m \"&lt;message&gt;\" commits changes made to added files to the repository. It says, “hey, take a snapshot of the things you looked at in the previous command.” Don’t forget the -m. 2\ngit push origin main pushes your local commits to the remote repository on GitHub. It says, “hey, take a look at these snapshots I just made”. It is possible to push to branches other than main. Simply replace main with the desired branch name.\ngit log --oneline shows the commit history in the repository.\ngit diff shows changes since the last commit.\n\n\n\n\n\n\nExercise 6\n\n\n\n\nNavigate to your first-repo directory on the command line and run git status to confirm that there is a git repo.\nIn RStudio, create a new R project. Select the option to associate the R project with an existing directory and select the first-repo directory. This will open the first-repo project.\nCreate a quarto document. Select the HTML option and give the document whatever title you’d like. Once the document is created, save the untitled document as “index.qmd”. Edit the YML header of the document to set self-contained to true as follows:\n\nformat: \n      html:\n        self-contained: true\n\nIn a code chunk, add library(tidyverse) and create any graph with library(ggplot2) and the storms dataset.\nRender the document to html.\nIn the terminal, run git add index.qmd index.html. Then run git status.\nThen run git commit -m \"add first graph\" to commit the two files with a commit message. Then run git status again and observe the change.\nFinally, run git push origin main to push the commit to GitHub. Navigate to the repo on GitHub to confirm that the files have been pushed to your remote repo.\nMake some changes to your the graph in your index.qmd file (e.g. change the color of a geometry, add labels, etc.). Then run steps 5-8 again (with a different commit message in step 7).\nIn the GitHub repo, click on index.qmd then click on the History icon in the top right corner. Note that you’ll see your two commits. Click on the most recent commit and notice that you can see the changes that you’ve made to the file.",
    "crumbs": [
      "Version Control",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Reproducible Research with Git and GitHub</span>"
    ]
  },
  {
    "objectID": "06_reproducible-research-with-git.html#sec-ghp",
    "href": "06_reproducible-research-with-git.html#sec-ghp",
    "title": "6  Reproducible Research with Git and GitHub",
    "section": "6.7 GitHub Pages",
    "text": "6.7 GitHub Pages\nGitHub Pages are free websites hosted directly from a GitHub repository. With a free GitHub account, a GitHub repo must be public to create a GitHub page with that repo. When you create a GitHub page, you associate it with a specific branch of your repo. GitHub Pages will look for an index.html, index.md, or README.md file as the entry file for your site.\n\n\n\n\n\n\nExercise 7\n\n\n\n\nGo to your GitHub repository and select “Settings” on the top right.\nUnder the “Code and Automations” menu on the left side, select “Pages”.\nUnder “Build and Deployment” and “Branch”, use the drop down menu to change the branch to “main”. This will trigger the deployment of your GitHub page from the “main” branch of your repository. It will take a bit of time for your GitHub page to be ready.\nRefresh the page, and when you see a box that says “your site is live” at the top of your page, click the link to go to your website!",
    "crumbs": [
      "Version Control",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Reproducible Research with Git and GitHub</span>"
    ]
  },
  {
    "objectID": "06_reproducible-research-with-git.html#collaboration-using-git-github-with-branching",
    "href": "06_reproducible-research-with-git.html#collaboration-using-git-github-with-branching",
    "title": "6  Reproducible Research with Git and GitHub",
    "section": "6.8 Collaboration Using Git + GitHub (with branching)",
    "text": "6.8 Collaboration Using Git + GitHub (with branching)\nOur workflow so far has involved only one person, but the true power of GitHub comes through collaboration! There are two main models for collaborating with GitHub.\n\nShared repository with branching\nFork and pull\n\nWe have almost exclusively seen approach one used by collaborative teams. Approach two is more common when a repository has been publicized, and someone external to the work wants to propose changes while lacking the ability to “write” (or push) to that repository. Approach one is covered in more detail in the next chapter.\n\n\n\nA Common Branching Workflow\n\n\nTo add a collaborator to your repository, under Settings select “Collaborators” under the Access menu on the left. Select the “Add people” button and add your collaborators by entering their GitHub user name.",
    "crumbs": [
      "Version Control",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Reproducible Research with Git and GitHub</span>"
    ]
  },
  {
    "objectID": "06_reproducible-research-with-git.html#conclusion",
    "href": "06_reproducible-research-with-git.html#conclusion",
    "title": "6  Reproducible Research with Git and GitHub",
    "section": "6.9 Conclusion",
    "text": "6.9 Conclusion\nGit is a distributed version-control system. It is used for tracking changes in the code. GitHub is an online hosting service for version control using git. Key workhorse commands are git status, git add, git commit -m &lt;message&gt; git push and git diff. GitHub is also great because it will host websites using GitHub Pages.\n\n6.9.1 Git is Confusing\n\n\n\n\n\n\n\n\n\nWe promise that it’s worth it.\n\n\n6.9.2 Resources\n\nGit Cheat Sheet\nHappy Git and GitHub for the UserR\nGit Pocket Guide\nGetting Git Right\nGit Learning Lab\nGit Handbook\nMastering Markdown\nUnderstanding the GitHub Flow\nDocumenting Your Projects on GitHub\nGit Tutorial",
    "crumbs": [
      "Version Control",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Reproducible Research with Git and GitHub</span>"
    ]
  },
  {
    "objectID": "06_reproducible-research-with-git.html#sec-ap-a",
    "href": "06_reproducible-research-with-git.html#sec-ap-a",
    "title": "6  Reproducible Research with Git and GitHub",
    "section": "6.10 Personal Access Tokens for Authentication",
    "text": "6.10 Personal Access Tokens for Authentication\n\nStarting on your GitHub account navigate through the following:\n\nClick your icon in the far right\nSelect Settings at the bottom of the drop down menu\nSelect Developer Settings on the bottom left\nSelect Personal access tokens on the bottom left\nSelect Generate new token\n\nSet up your Personal Access Token (PAT)\n\nAdd a note describing the use of your token. This is useful if you intend to generate multiple tokens for different uses.\nSelect “No expiration”. You may want tokens to expire if that access sensitive resources.\nSelect scopes. You must select at least the “repo” scope. You may want to add other scopes but they are not required for this course.\n\nClick Generate token\nThis is your only chance to view the token. Copy and paste the token and store it somewhere safe. If you lose the token, you can always generate a new token.\nGit will prompt you for your GitHub username and password sometimes while cloning repositories or pushing to private repositories. Use your GitHub username when prompted for username. Use your generated PAT when prompted for password.",
    "crumbs": [
      "Version Control",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Reproducible Research with Git and GitHub</span>"
    ]
  },
  {
    "objectID": "06_reproducible-research-with-git.html#sec-app-b",
    "href": "06_reproducible-research-with-git.html#sec-app-b",
    "title": "6  Reproducible Research with Git and GitHub",
    "section": "6.11 Initialize a Repo Locally and Add to GitHub",
    "text": "6.11 Initialize a Repo Locally and Add to GitHub\nThis only needs to happen once per repository\n\nInitialize a local repository with git init as outlined above.\nOn GitHub, click the plus sign in the top, right corner and select New Repository.\nCreate a repository with the same name as your directory.\nCopy the code under …or push an existing repository from the command line and submit it in the command line that is already open.",
    "crumbs": [
      "Version Control",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Reproducible Research with Git and GitHub</span>"
    ]
  },
  {
    "objectID": "06_reproducible-research-with-git.html#footnotes",
    "href": "06_reproducible-research-with-git.html#footnotes",
    "title": "6  Reproducible Research with Git and GitHub",
    "section": "",
    "text": "Github refuses to store files larger than 100 MiB. This poses a challenge to writing reproducible code. However, many data sources can be downloaded directly from the web or via APIs, allowing code to be reproducible without relying on storing large data sets on Github. Materials later in this book discuss scaping data from the web and using APIs.↩︎\nThe -m stands for message. Writing a brief commit message like “fixes bug in data cleaning script” can help collaborators (including your future self) understand the purpose of your commits.↩︎",
    "crumbs": [
      "Version Control",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Reproducible Research with Git and GitHub</span>"
    ]
  },
  {
    "objectID": "07_advanced-git.html",
    "href": "07_advanced-git.html",
    "title": "7  Advanced Git and Github",
    "section": "",
    "text": "7.1 The Issue &gt; Branch &gt; PR Workflow\nThere are several popular workflows for collaborating with Git and GitHub. This section outlines an issue-branch-pr workflow which is extremely common and which we use regularly.",
    "crumbs": [
      "Version Control",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Advanced Git and Github</span>"
    ]
  },
  {
    "objectID": "07_advanced-git.html#the-issue-branch-pr-workflow",
    "href": "07_advanced-git.html#the-issue-branch-pr-workflow",
    "title": "7  Advanced Git and Github",
    "section": "",
    "text": "7.1.1 GitHub issues\nGitHub issues are a GitHub project management tool for managing to-dos and conversations about a code base. This feature of Github can be seen as a built-in alternative to project management softwares like Jira, Trello, and monday, among many others.\n\nFor each substantial change to the code base, open a GitHub issue.\n\n\n7.1.2 Working with Branches\n\nBranching Motivation\nThe track changes feature in programs like with Microsoft Word follows each and every keystroke or click. In the previous chapter, we compared git to a super-charged version of track changes, and we think this comparison is fair. However, code is different than prose. If a program is not working, it isn’t desirable to document and share a change until that change creates a different, but still working, program. Working with other developers can complicate this desire to always commit sensible changes.\nMeet branching. Branching allows multiple versions of the same program to be developed simultaneously and then merged together when those versions are ready and operational.\n\n\nBranching Diagrammed\nRecall the following diagram from last chapter. We need a way to:\n\nCreate branches\nSwitch between branches\nCombine branches\n\n\n\n\nA standard git workflow\n\n\nA second stylized (and cute!) example of this workflow can be seen in this tweet from Jennifer Gilbert. The octopus on the left side of the image represents an existing, operational piece of code. Two programmers create separate copies (branches) of that code, work to create independent features (represented by the heart glasses and a cowboy hat), and then merge those features back to the master branch when those features are operational.\n\n\nHow to branch\ngit branch prints out important information about the available branches in a repo. It is similar to git status in that it provides useful information while not making any changes.\ngit switch -c &lt;new branch name&gt; creates a new branch and then navigates you to the new branch.\ngit switch &lt;new branch name&gt; navigates you from your current branch to the specified branch. It is only possible to switch between branches if there are no uncommitted changes. 1\n\nUse git switch main to navigate to the main branch. Use git pull origin main to update your local version of the main branch with any remote changes.\nUse git switch -c &lt;new branch name&gt; to create and switch to a new branch with the name iss&lt;number&gt;, where  is the issue number from GitHub.\nWork as if you are on the main branch but push to branch iss&lt;number&gt;.\n\nJenny Bryan provides a more thorough background.\n\n\n\n7.1.3 Pull requests\nThe easiest way to merge branches is on GitHub with pull requests. When you are ready to merge the code, push all of your code to your remote branch.\n\nOn GitHub, click the new pull request button.\n\n\n\n\nAn New Pull Request\n\n\n\nThen set a pull request from the branch on the right to the branch on the left.\n\n\n\n\n\n\n\nNavigate to the pull requests page and review the pull request.  \nMerge the pull request:\n\n\n\n\n\n\n\n\n7.1.4 Putting it all together\n\nOpen a GitHub issue for a substantial change to the project\nCreate a new branch named after the GitHub issue number\nAfter one or more commits, create a pull request and merge the code\n\n\n\n7.1.5 Merge conflicts\nIf you run into merge conflicts, either follow the GitHub instructions or follow Jenny Bryan’s instructions for resolving the conflict at the command line. Do not panic!",
    "crumbs": [
      "Version Control",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Advanced Git and Github</span>"
    ]
  },
  {
    "objectID": "07_advanced-git.html#github-pages",
    "href": "07_advanced-git.html#github-pages",
    "title": "7  Advanced Git and Github",
    "section": "7.2 GitHub Pages",
    "text": "7.2 GitHub Pages\nAs we introduced in Section 6.7, GitHub offers a free and simple tool for a hosting website in a GitHub repository called GitHub pages. A basic setup is to use index.html or README.md as an index to connect individual pages together whose URLs are based on their file names.\nLet’s walk through an example:\n\n7.2.1 README as homepage\n\nCreate a new local directory with a README.md.\nRun echo \"&lt;h1&gt;Page 1&lt;\\h1&gt;\" &gt; page1.html at the command line.\ngit init, git add, and git commit your changes.\nCreate a remote repository on GitHub and link it to your local repository.\nPush your local changes.\nNavigate to Settings in your GitHub repo. Go to GitHub pages and set the source to “main branch”. The page will reload and a link will appear. Go to the link.\nAdd page1 to the end of the link\nAdd the link to page1 in the README. git add, git commit, and git push.\n\n\n\n7.2.2 index as homepage\nThe Urban Institute R Users Group website does not use the README as a home page. Instead it uses and index page.\n\nRun echo \"&lt;h1&gt;Index&lt;\\h1&gt;\" &gt; index.html at the command line.\nRun echo \"&lt;a href=\"https://awunderground.github.io/git-example/page1\"&gt;Page 1&lt;/a&gt;\" &gt; index.html at the command line where url is the link to Page 1 on GitHub pages.\nAdd, commit, and push your code to the main branch.\nAfter a few minutes return to the link provided on GitHub pages.",
    "crumbs": [
      "Version Control",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Advanced Git and Github</span>"
    ]
  },
  {
    "objectID": "07_advanced-git.html#conclusion",
    "href": "07_advanced-git.html#conclusion",
    "title": "7  Advanced Git and Github",
    "section": "7.3 Conclusion",
    "text": "7.3 Conclusion\nGitHub Pages is a great project management tool. It can be integrated perfectly into the Issue &gt; Branch &gt; PR workflow. Branching is useful to allow separate collaborators to work on different features of a codebase simultaneously without interrupting each other. When conflicts do arise, do not fret! Merge conflicts are normal and can be resolved easily.\n\n7.3.1 More resources\n\nGit Cheat Sheet\nHappy Git and GitHub for the UserR\nGit Pocket Guide\nGetting Git Right\nGit Learning Lab\nThe Urban Institute’s Reproducibility Website and its Git and Github page",
    "crumbs": [
      "Version Control",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Advanced Git and Github</span>"
    ]
  },
  {
    "objectID": "07_advanced-git.html#footnotes",
    "href": "07_advanced-git.html#footnotes",
    "title": "7  Advanced Git and Github",
    "section": "",
    "text": "git checkout is another exceedingly common git command. Many resources on the internet may encourage the usage of git checkout &lt;branch name&gt; to switch branches, or git checkout -b &lt;new branch name&gt; to create a new branch and then switch to it. This is okay! However, git checkout also has other capabilities, and that glut of functionality can be confusing to users. This makes git switch the simpler, more modern option.]↩︎",
    "crumbs": [
      "Version Control",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Advanced Git and Github</span>"
    ]
  },
  {
    "objectID": "functions-and-tests.html",
    "href": "functions-and-tests.html",
    "title": "8  Modular, Tested Code",
    "section": "",
    "text": "8.1 Fundamental Ideas\nSoftware carpentry and Nick Eubank identify defensive programming as fundamental to avoiding mistakes in an analysis. Defensive programming can also add clarity to an analysis.\nSoftware carpentry1 highlights three parts of defensive programming:\nUnit tests have pre-conceived inputs (e.g. test data) with a pre-conceived set of out outputs.\nSuppose we’re an airplane manufacturer. Unit tests are all of the checks we would run before ever putting passengers on a plane. Does the engine consume fuel at a pre-determined rate? Does the airplane generate sufficient list? Assertions are all of the checks we would run every time the plane is operated. Did the landing gear come down? Do we have enough fuel for this flight distance?\nLet’s consider a few important principles of assertions and tests.\nBelow, we’ll take these principles and apply them to building functions, testing data for analysis, and testing the assumptions of an analysis.",
    "crumbs": [
      "Programming",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Modular, Tested Code</span>"
    ]
  },
  {
    "objectID": "functions-and-tests.html#fundamental-ideas",
    "href": "functions-and-tests.html#fundamental-ideas",
    "title": "8  Modular, Tested Code",
    "section": "",
    "text": "Defensive programming\n\n\n\nDefensive programming is a set of practices intended to avoid common mistakes and to catch mistakes with assertions and unit tests.\n\n\n\n\n\n\nwrite programs that check their own operation,\nwrite and run tests for widely-used functions, and\nmake sure we know what “correct” actually means\n\n\n\n\n\n\n\n\nUnit test\n\n\n\nA unit test is an evaluation of a function under a preconceived set of conditions that returns TRUE or FALSE based on the output of the function.\n\n\n\n\n\n\n\n\n\nAssertion\n\n\n\nAssertions are statements about what must be true at a specific point in a program.\n\nPrecondition: An assertion about what must be true at the beginning of a function for the function to work correctly. (input tests)\nPostcondition: An assertion about what must be true at the end of a function (output tests).\nInvariant: A condition that is supposed to be true at a point in time in code.\n\n\n\n\n\n\nDefinition: Test-driven development is the practice of writing unit tests before writing code and then evaluating the code against the tests. We’ll also consider writing assertions before writing code and evaluating a program against assertions as test-driven development.\nDefinition: Fail fast, fail often is the principle of working to catch mistakes as soon as they happen. When an error occurs, well-placed tests early in an analysis can minimize the scope of debugging, save computation time, and avoid costly mistakes.\nDefinition: Fail loudly is the principle that errors should be difficult to ignore. In general, we will favor fatal errors that force us to address the underlying problem before proceeding.2\nDefinition: Fail clearly is the principle that errors should return meaningful and informative error messages.",
    "crumbs": [
      "Programming",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Modular, Tested Code</span>"
    ]
  },
  {
    "objectID": "functions-and-tests.html#modular-tested-code",
    "href": "functions-and-tests.html#modular-tested-code",
    "title": "8  Modular, Tested Code",
    "section": "8.2 Modular, Tested Code",
    "text": "8.2 Modular, Tested Code\nFunctions with unit tests lead to modular, tested code and address three (!) questions from Opinionated Data Analysis:\n\nCan you re-use logic in different parts of the analysis?\n\nFunctions allow us to reuse bits of R code over and over. In fact, we can iterate functions with for loops and map-reduce.\n\nIf you decide to change logic, can you change it in just one place?\n\nFunctions are the best way to follow the DRY principle. DRY, or don’t repeat yourself, is the principle that we should we should create a function any time we do something three times.\nCopying-and-pasting is typically bad because it is easy to make mistakes and we typically want a single source source of truth in a script. Custom functions also promote modular code design and testing.\nSuppose we copy and paste the same code with minor changes twenty times. Then, we realize we need to make a change to the core functionality. Now we need to make the change twenty times. If we use a function and need to make a change, we only need to change the code in the function.\n\nIf your code is not performing as expected, will you know?\n\nAssertions and unit tests that fail fast, fail loudly, and fail clearly are the best way to ensure our code is performing as expected.\nThe bottom line: we want to write clear functions that do one and only one thing that are sufficiently tested so we are confident in their correctness.\n\n8.2.1 Example Functions\nLet’s consider a couple of examples from (barrientos2021?). This paper is a large-scale simulation of formally private mechanisms, which relates to several future chapters of this book.\nDivision by zero, which returns NaN, can be a real pain when comparing confidential and noisy results when the confidential value is zero. This function simply returns 0 when the denominator is 0.\n\n#' Safely divide number. When zero is in the denominator, return 0. \n#'\n#' @param numerator A numeric value for the numerator\n#' @param denominator A numeric value for the denominator\n#'\n#' @return A numeric ratio\n#'\nsafe_divide &lt;- function(numerator, denominator) {\n  \n  if (denominator == 0) {\n    \n    return(0)\n    \n  } else {\n    \n    return(numerator / denominator)\n    \n  }\n}\n\nThis function\n\nImplements the laplace or double exponential distribution, which isn’t included in base R.\nApplies a technique called the laplace mechanism.\n\n\n#' Apply the laplace mechanism\n#'\n#' @param eps Numeric epsilon privacy parameter\n#' @param gs Numeric global sensitivity for the statistics of interest\n#'\n#' @return\n#' \nlap_mech &lt;- function(eps, gs) {\n  \n  # Checking for proper values\n  if (any(eps &lt;= 0)) {\n    stop(\"The eps must be positive.\")\n  }\n  if (any(gs &lt;= 0)) {\n    stop(\"The GS must be positive.\")\n  }\n  \n  # Calculating the scale\n  scale &lt;- gs / eps\n\n  r &lt;- runif(1)\n\n  if(r &gt; 0.5) {\n    r2 &lt;- 1 - r\n    x &lt;- 0 - sign(r - 0.5) * scale * log(2 * r2)\n  } else {\n    x &lt;- 0 - sign(r - 0.5) * scale * log(2 * r)\n  }\n  \n  return(x)\n}\n\n\n\n8.2.2 Function Basics\nR has a robust system for creating custom functions. To create a custom function, use function():\n\nsay_hello &lt;- function() {\n  \n  \"hello\"\n   \n}\n\nsay_hello()\n\n[1] \"hello\"\n\n\nOftentimes, we want to pass parameters/arguments to our functions:\n\nsay_hello &lt;- function(name) {\n  \n  paste(\"hello,\", name)\n   \n}\n\nsay_hello(name = \"aaron\")\n\n[1] \"hello, aaron\"\n\n\nWe can also specify default values for parameters/arguments:\n\nsay_hello &lt;- function(name = \"aaron\") {\n  \n  paste(\"hello,\", name)\n   \n}\n\nsay_hello()\n\n[1] \"hello, aaron\"\n\nsay_hello(name = \"alex\")\n\n[1] \"hello, alex\"\n\n\nsay_hello() just prints something to the console. More often, we want to perform a bunch of operations and the then return some object like a vector or a data frame. By default, R will return the last unassigned object in a custom function. It isn’t required, but it is good practice to wrap the object to return in return().\n\n\n\n\n\n\nExercise 1\n\n\n\n\nCreate a function called say_goodbye() that says goodbye.\nGive it a name argument and a default value for name.\n\n\n\nIt’s also good practice to document functions. With your cursor inside of a function, go Insert &gt; Insert Roxygen Skeleton:\n\n#' Say hello\n#'\n#' @param name A character vector with names\n#'\n#' @return A character vector with greetings to name\n#' \nsay_hello &lt;- function(name = \"aaron\") {\n  \n  greeting &lt;- paste(\"hello,\", name)\n  \n  return(greeting)\n  \n}\n\nsay_hello()\n\n[1] \"hello, aaron\"\n\n\nAs you can see from the Roxygen Skeleton template above, function documentation should contain the following:\n\nA description of what the function does\nA description of each function argument, including the class of the argument (e.g. string, integer, dataframe)\nA description of what the function returns, including the class of the object\n\nTips for writing functions:\n\nFunction names should be short but effectively describe what the function does. Function names should generally be verbs while function arguments should be nouns. See the Tidyverse style guide for more details on function naming and style.\nAs a general principle, functions should each do only one task. This makes it much easier to debug your code and reuse functions!\nUse :: (e.g. dplyr::filter() instead of filter()) when writing custom functions. This will create stabler code and make it easier to develop R packages.\n\n\n\n8.2.3 Functions with Multiple Outputs\nWhen return() is reached in a function, return() is evaluated, evaluation ends and R leaves the function.\n\nsow_return &lt;- function() {\n  \n  return(\"The function stops!\")\n  \n  return(\"This never happens!\")\n  \n}\n\nsow_return()\n\n[1] \"The function stops!\"\n\n\nIf the end of a function is reached without calling return(), the value from the last evaluated expression is returned.\nWe prefer to include return() at the end of functions for clarity even though return() doesn’t change the behavior of the function.\n\n\n8.2.4 Referential Transparency\nR functions, like mathematical functions, should always return the exact same output for a given set of inputs.3 This is called referential transparency. R will not enforce this idea, so you must write good code.\n\nBad!\n\nbad_function &lt;- function(x) {\n  \n  x * y\n  \n}\n\ny &lt;- 2\nbad_function(x = 2)\n\n[1] 4\n\ny &lt;- 3\nbad_function(x = 2)\n\n[1] 6\n\n\n\n\nGood!\n\ngood_function &lt;- function(x, y) {\n  \n  x * y\n  \n}\n  \ny &lt;- 2\ngood_function(x = 2, y = 1)\n\n[1] 2\n\ny &lt;- 3\ngood_function(x = 2, y = 1)\n\n[1] 2\n\n\nBruno Rodriguez has a book and a blog that explore this idea further.\n\n\n\n8.2.5 Limitations of Macros\nMacros are popular in Stata and SAS. Macros promote DRY programming and modular programming.\nFunctions have environments, which means an object in a function doesn’t exist outside of the function unless it is explicitly returned. Macros rely on textual substitution, which makes it easy for an object in a function to affect objects outside of a function.",
    "crumbs": [
      "Programming",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Modular, Tested Code</span>"
    ]
  },
  {
    "objectID": "functions-and-tests.html#assertions-in-functions",
    "href": "functions-and-tests.html#assertions-in-functions",
    "title": "8  Modular, Tested Code",
    "section": "8.3 Assertions in Functions",
    "text": "8.3 Assertions in Functions\nstopifnot(), stop(), and warning() are useful functions for implementing assertions inside custom functions. stopifnot() is easier to use but stop() allows for detailed error messages.\n\nsum_integers &lt;- function(x) {\n  \n  stopifnot(class(x) == \"integer\")\n  \n  x_sum &lt;- sum(x)\n  \n  return(x_sum)\n  \n}\n\n\nsum_integers(x = c(1, 2))\n\nError in sum_integers(x = c(1, 2)) : class(x) == \"integer\" is not TRUE\n\nsum_integers &lt;- function(x) {\n  \n  if (class(x) != \"integer\") {\n    stop(\"Error: input vector x must be of class integer\")\n  }\n  \n  x_sum &lt;- sum(x)\n  \n  return(x_sum)\n  \n}\n\n\nsum_integers(x = c(1, 2))\n\nError in sum_integers(x = c(1, 2)) : \n  Error: input vector x must be of class integer\n\n\n\n\n\n\nExercise 2\n\n\n\n\nAdd an precondition assertion to say_goodbye() to test if the input is a character string. is.character() is useful.\n\n\n\n\n8.3.1 Unit Tests for Functions\nlibrary(testthat) is a powerful framework for unit testing\nlibrary(testthat) uses two big ideas: expectations and tests.\nExpectations compare the output of the function against expected output. Consider the sum_integer() from earlier. We can write an expectation that the function throws an error with incorrect inputs and we can write an expectation that the function returns an integer when it has the correct inputs.\n\nlibrary(testthat)\n\n\nAttaching package: 'testthat'\n\n\nThe following object is masked from 'package:gt':\n\n    matches\n\n\nThe following object is masked from 'package:dplyr':\n\n    matches\n\n\nThe following object is masked from 'package:purrr':\n\n    is_null\n\n\nThe following objects are masked from 'package:readr':\n\n    edition_get, local_edition\n\n\nThe following object is masked from 'package:tidyr':\n\n    matches\n\nexpect_error(sum_integers(x = c(1, 2)))\nexpect_type(sum_integers(x = c(1L, 2L)), type = \"integer\")\n\nTests group multiple expectations together and begins with test_that().\n\ntest_that(\"sum_integers() tests inputs and returns the correct output\", {\n  \n  expect_error(sum_integers(x = c(1, 2)))\n  expect_type(sum_integers(x = c(1L, 2L)), type = \"integer\")\n  \n})\n\nTest passed 😸\n\n\n\n\n\n\n\n\nTest coverage\n\n\n\nTest coverage is the scope and quality of tests performed on a code base.\n\n\nThe goal to develop tests with good test coverage that will loudly fail when bugs are introduced into code.",
    "crumbs": [
      "Programming",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Modular, Tested Code</span>"
    ]
  },
  {
    "objectID": "functions-and-tests.html#custom-r-packages",
    "href": "functions-and-tests.html#custom-r-packages",
    "title": "8  Modular, Tested Code",
    "section": "8.4 Custom R Packages",
    "text": "8.4 Custom R Packages\nIf we have R functions with roxygen headers and tests, then we almost have an R package.\nAt some point, the same scripts or data are used often enough or widely enough to justify moving from sourced R scripts to a full-blown R package. R packages make it easier to\n\nMake it easier to share and version code.\nImprove documentation of functions and data.\nMake it easier to test code.\nOften lead to fun hex stickers.\n\n\n8.4.1 Use This\nlibrary(usethis) includes an R package template. The following will add all necessary files for an R package to a directory called testpackage/ and open an RStudio package.\n\nlibrary(usethis)\ncreate_package(\"/Users/adam/testpackage\")\n\nWe won’t cover the rest of R package development but a custom R package is easier to make than it sounds. The second edition of R Packages by Hadley Wickham and Jennifer Bryant is a great free resource to learn more.",
    "crumbs": [
      "Programming",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Modular, Tested Code</span>"
    ]
  },
  {
    "objectID": "functions-and-tests.html#footnotes",
    "href": "functions-and-tests.html#footnotes",
    "title": "8  Modular, Tested Code",
    "section": "",
    "text": "Nick Eubank identifies adding tests, never transcribe, style matters, and don’t duplicate information. Many of the ideas are scattered throughout this training.↩︎\nRecall, Quarto requires the code to run error-free for the document to render.↩︎\nThis rule won’t exactly hold if the function contains random or stochastic code. In those cases, the function should return the same output every time if the seed is set with set.seed().↩︎",
    "crumbs": [
      "Programming",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Modular, Tested Code</span>"
    ]
  },
  {
    "objectID": "renv.html",
    "href": "renv.html",
    "title": "9  library(renv)",
    "section": "",
    "text": "9.1 Problem Definition\nEvery time we run a line of R code or Python code, we rely on an entire stack of software and hardware that affects how our line of R code or Python code runs.\nChanging computing environments can lead to many issues with reproducibility.\nEach example above corresponds to a layer of a computing environment.\nThis is core to reproducibility. Unfortunately, this is where we must temper our expectations.\nWe will focus on the packages layer of our environment. It is the place where we can get the highest return on investment for our work.",
    "crumbs": [
      "Environment Management",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>`library(renv)`</span>"
    ]
  },
  {
    "objectID": "renv.html#problem-definition",
    "href": "renv.html#problem-definition",
    "title": "9  library(renv)",
    "section": "",
    "text": "Computing Environment\n\n\n\nThe packages, software, and hardware that supports running code for an analysis.\n\n\n\n\nPython and R packages can change in ways that change the results of an analysis. The packages may change because the authors\n\nintroduce new functionality\nimprove the package interface\ndiscover and fix bugs\n\nBeneath packages, Python or R can change in ways that change the results of an analysis.\nAdjacent to programming languages, compilers and linear algebra libraries can change or even the computer operating system can change.\nHardware can change in ways that change the results of an analysis.\n\n\n\npackage\nsystem\nhardware\n\n\nIgnoring the readiness of the data science environment results in the dreaded it works on my machine phenomenon with a failed attempt to share code with a colleague or deploy an app to production. ~ (Gold 2024)\n\n\n\n\n\n\n\n\nWarning\n\n\n\nA perfectly reproducible environment isn’t possible. We quickly hit the point of diminishing returns where system-level factors like machine precision and pseudo random processes (seeds) affect results.\n\n\n\n\nWe can avoid situations where our 2018 analysis using 2018 R packages breaks using 2024 R packages.\nWe can avoid situations where our 2024 R packages don’t work on our friend’s computer.\nWe can intentionally use older versions of R packages.\nWe can make it easy to move from our computer to a cloud computer where we have scalable computing power.",
    "crumbs": [
      "Environment Management",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>`library(renv)`</span>"
    ]
  },
  {
    "objectID": "renv.html#ideal-solution",
    "href": "renv.html#ideal-solution",
    "title": "9  library(renv)",
    "section": "9.2 Ideal Solution",
    "text": "9.2 Ideal Solution\nWhat does an ideal solution look like for managing the package layer of a computing environment?\n\nIsolate: We should be able to isolate the package environment at the project level. That means we can install, update, or remove packages in our current project without affecting any other projects. This means we’ll have project-specific versions of packages.\nDocument: We should be able to document our package environment so the package environment is reproducible.\nShare: Our environment should be portable. More precisely, we should be able to share documentation about our environment so someone else (or our future selves) can recreate the environment.\n\n\n\n\n\n\n\nLibrary\n\n\n\nA library is a folder that contains installed packages. Libraries can hold at most one version of a package.\n\n\nRunning the .libPaths() function shows the location of the library used by an R session.\nBy default, R’s library will be the system library. We’re interested in creating a project-specific library.\n\n\n\n\n\n\nState\n\n\n\nThe condition of a computing environment at a point-in-time.\n\n\n\n\n\n\n\n\nRepository\n\n\n\nA repository is a source of packages. The most popular repository is the Comprehensive R Archive Network (CRAN), which we typically use when we run install.packages().\n\n\nWe’re interested in documenting the repository used to install each package.\n\n\n\n\n\n\nVirtual environment\n\n\n\nA virtual environment is a collection of packages and software that support a project that are isolated from other projects.\n\n\nWe will use library(renv) to create a virtual environment to track the state of our computing environment with a project-specific library with packages deliberately installed from specific repositories.",
    "crumbs": [
      "Environment Management",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>`library(renv)`</span>"
    ]
  },
  {
    "objectID": "renv.html#libraryrenv",
    "href": "renv.html#libraryrenv",
    "title": "9  library(renv)",
    "section": "9.3 library(renv)",
    "text": "9.3 library(renv)\nlibrary(renv), short for reproducible environment, allows us to create project-specific virtual environments.\n\n\n\n\n\n\nExercise 1\n\n\n\n\nInstall renv with install.packages(\"renv\").\nRun the function .libPaths() at the console.\n\n\n\nOur workflow will have three steps.\n\n9.3.1 1. Isolate\n\n\n\n\n\n\nIsolate\n\n\n\nWe should be able to isolate the package environment at the project level. That means we can install, update, or remove packages in our current project without affecting any other projects. This means we’ll have project-specific versions of packages.\n\n\nThe init() function creates a project-specific virtual environment with a project-specific library. This means the R session will use packages from a project library instead of a system library. Running init() creates three new items in a project:\n\nrenv/library/ is the project-specific library.\nrenv.lock contains metadata that describes the project-specific library.\n.Rprofile is a hidden system file. It isn’t specific to library(renv), but in this case it tells R to use the project library instead of the system library.\n\nAt first, this library won’t have anything in it. This is a little extra work! But we can use install() and update() to add R packages to the project-specific library.\n\n\n\n\n\n\nExercise 2\n\n\n\n\nRun install.packages(\"dplyr\") and then library(dplyr). The dplyr package should load.\nRun renv::init(). You will get a long message.\nRun library(dplyr)\nRun .libPaths()\n\n\n\n\n\n9.3.2 2. Document\n\n\n\n\n\n\nDocument\n\n\n\nWe should be able to document our package environment so the package environment is reproducible.\n\n\nThe snapshot() function documents the current project environment by updating metadata in the renv.lock file. snapshot() will install, update, or uninstall any packages that are in an inconsistent state and update the lockfile to represent the current state of dependencies in the project.\nThe lockfile (renv.lock) contains JSON that documents the current state of dependencies for a project. For instance, if we install and use library(palmerpenguins), the lockfile will look like:\n{\n  \"R\": {\n    \"Version\": \"4.3.1\",\n    \"Repositories\": [\n      {\n        \"Name\": \"CRAN\",\n        \"URL\": \"https://packagemanager.posit.co/cran/latest\"\n      }\n    ]\n  },\n  \"Packages\": {\n    \"palmerpenguins\": {\n      \"Package\": \"palmerpenguins\",\n      \"Version\": \"0.1.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"6c6861efbc13c1d543749e9c7be4a592\"\n    },\n    \"renv\": {\n      \"Package\": \"renv\",\n      \"Version\": \"1.0.7\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"utils\"\n      ],\n      \"Hash\": \"397b7b2a265bc5a7a06852524dabae20\"\n    }\n  }\n}\nThe status() gives us a snapshot of the documented project environment.\n\n\n\n\n\n\nExercise 3\n\n\n\n\nRun renv::status()\nRun ren::snapshot()\nCreate an R script. Load library(dplyr).\nRun renv::status()\nRun ren::snapshot()\n\n\n\n\n\n9.3.3 3. Share\n\n\n\n\n\n\nShare\n\n\n\nWe should be able to share documentation about our environment so someone else (or our future selves) can recreate the environment.\n\n\nThe restore() function will use files created by snapshot() to recreate a project environment.\nWe won’t actually directly run this function often. If we share a project that uses renv, RStudio should automatically ask us if we want to download and install the documented packages using restore().\nWe likely won’t need to use restore() on the computer where init() was run. Rather, you should see a prompt when opening up a .Rproj:\nProject '~/presentations/test-project' loaded. [renv 1.0.7]\nWe’ll need to commit multiple files to Git to share an renv virtual project environment:\n\nrenv.lock\n.Rprofile\nrenv/settings.json\nrenv/activate.R\n\nIf a Git repository has already been initialized, then init() will automatically add files that should not be shared to the .gitignore in the renv/ folder:\n\nrenv/library/\nAny other folder in renv/\n\n\n\n\n\n\n\nExercise 4\n\n\n\n\nClone the penguins-analysis GitHub repository.\nOpen up the project and confirm library(renv) recreates the package-layer of the computing environment. You may need to run renv::restore().\nRun the code in analysis.R.\n\n\n\n\n\n\n\n\n\nExercise 5\n\n\n\n\nIn your main project run renv::init().\nInstall the necessary R packages with renv::install().\nUse renv::snapshot() to document the state of the project layer of the computing environment.\n\n\n\n\n\n9.3.4 More about library(renv)\nrenv doesn’t install packages in a project directory. Instead, renv makes references to user-level packages, which saves space and install time.\nrenv doesn’t acknowledge a dependency until it is used somewhere in the project! dependencies() will show the .R scripts and Quarto documents where dependencies are created.\nupdate() updates a package that has already been installed and remove() removes a package that has been installed.\ndeactivate() is like hitting pause on the project environment. It shifts the project to using the system library but doesn’t delete any of the renv files in the directory. reactivate() is the opposite of deactive().\nrenv::deactivate(clean = TRUE) is dynamite. It shifts the project to using the system library and deletes all of the renv files. There is no going back. At this point, using renv in the project will require starting from scratch with renv::init().\nIf the repository has a Git history, history() can explore past versions of the project environment and revert() can return to an earlier version of the project library. With this in mind, it may make sense to begin using renv near the beginning of a project instead of at the end.\n\n\n9.3.5 Going deeper\nrenv solves environment management for the package layer of the computing environment but it doesn’t help with the system layer or the hardware layer. We’ll briefly cover some other tools that can help with the system layer and hardware layer.\n\n\n9.3.6 Conda\nConda can help with the system layer in addition to managing the package layer.\n\nConda is an open source package management system and environment management system for installing multiple versions of software packages and their dependencies and switching easily between them. It works on Linux, OS X and Windows, and was created for Python programs but can package and distribute any software.\n\nInterestingly, Gold (2024) is critical of Docker:\n\nConda allows you to create a virtual environment in user space on your laptop without having admin access. It’s especially useful when your machine is locked down by IT.\nThat’s not a great fit for a production environment. Conda smashes together the language version, the package management, and, sometimes, the system library management. This is conceptually simple and easy to use, but it often goes awry in production environments. In a production environment (or a shared workbench server), I recommend people manage Python packages with a virtual environment tool like {venv} and manage system libraries and versions of Python with tools built for those purposes.\n\n\n\n9.3.7 Docker\n\n\n\n\n\n\nContainer\n\n\n\nA container is a self-contained system for running computer software. Typically, containers are designed to be small and fit-for-use with specific analyses.\n\n\nContainerization is the process of creating a self-contained computer environment to run an analysis.\nDocker is a popular container tool. Docker can manage the software layer of a computing environment and the package layer of a computing environment. Docker can:\n\nSpecify the computer operating system\nControl system dependencies like the version of Pandoc, BLAS, and compilers\nControl the R or Python version\nManage R packages and Python packages\nManage the version of the code that’s run\n\nDockerHub is a popular repository for sharing Docker images.\nIt’s worth noting that the packages within Docker can be controlled with renv and the version of the code can be controlled with Git and GitHub.\nThe foundations of most containers are standard images. Rocker and Posit Images provide useful starting images.\n\nDocker 101 for data scientists\nDevOps for Data Science chapter 6\nrenv + Docker\n\n\n\n9.3.8 Cloud Computing\nThe explosion of popularity of cloud computing has expanded options for managing the hardware layer of a computing environment. Amazon Web Services, Google Cloud, and Microsoft Azure provide on-demand cloud computing environments with predictable, consistent, and documentable hardware.\nThese cloud computing environments have out-of-pocket marginal costs, but the costs are frequently cheaper than maintaining on-premise computing environments like servers. The costs are definitely cheaper than maintaining old, on-premise infrastructure to reproduce old computing environments.\nThe following is a sensible workflow:\n\nSpin up a cloud instance (computer) with a specific operating system.\nPick a Docker image from a Docker repository. This image should be close to fit-for-purpose.\nSet up Docker. Maybe set up renv. Create Dockerfiles and renv files.\nRun the project with good version control.\nSave the Docker files and renv",
    "crumbs": [
      "Environment Management",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>`library(renv)`</span>"
    ]
  },
  {
    "objectID": "renv.html#final-thoughts",
    "href": "renv.html#final-thoughts",
    "title": "9  library(renv)",
    "section": "9.4 Final Thoughts",
    "text": "9.4 Final Thoughts\nThis is a lot! Managing the software layer and hardware layer of a computing environment can improve the reproducibility of a project, but the rewards quickly diminish and the complexity quickly increases.\nImproving project organization and documentation, literate programming, version control, programming best practices, and managing the package layer of a computing environment will almost always yield more benefits than focusing on the software layer or hardware layer of a computing environment.\n\n\n\n\nGold, Alex K. 2024. DevOps for data science. First edition. Boca Raton, FL: CRC Press.",
    "crumbs": [
      "Environment Management",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>`library(renv)`</span>"
    ]
  },
  {
    "objectID": "reproducible-research-bootcamp_software-installation.html",
    "href": "reproducible-research-bootcamp_software-installation.html",
    "title": "Appendix A — Software Requirements",
    "section": "",
    "text": "B Installing R and RStudio\nR is an open source statistical programming language. RStudio is an Integrated Development Environment (IDE) for developing R code. RStudio is developed by the for-profit company Posit. Don’t worry, you don’t need to pay any money for this software.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Software Requirements</span>"
    ]
  },
  {
    "objectID": "reproducible-research-bootcamp_software-installation.html#windows",
    "href": "reproducible-research-bootcamp_software-installation.html#windows",
    "title": "Appendix A — Software Requirements",
    "section": "B.1 Windows",
    "text": "B.1 Windows\n\nB.1.1 R\n\nNavigate to the CRAN website.\nClick “Download R for Windows”\nClick “base”\nClick “Download R 4.4.1 for Windows”\nFollow the installation instructions. Accept all defaults and install R.\n\n\n\nB.1.2 RStudio\n\nNavigate to the RStudio website.\nDownload the RStudio Desktop installer for Windows. It should be something similar to “RStudio-2024.04.2-764.exe”.\nFollow the installation instructions. Accept all defaults and install RStudio.\nOpen RStudio. If successful, then R and RStudio are installed.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Software Requirements</span>"
    ]
  },
  {
    "objectID": "reproducible-research-bootcamp_software-installation.html#mac",
    "href": "reproducible-research-bootcamp_software-installation.html#mac",
    "title": "Appendix A — Software Requirements",
    "section": "B.2 Mac",
    "text": "B.2 Mac\n\nB.2.1 R\n\nNavigate to the CRAN website.\nClick “Download R for (Mac) OS X”\nSelect the .pkg link under “Latest Release” that corresponds with your chip type (Apple silicon or Intel).\nFollow the installation instructions. Accept all defaults and install R.\n\n\n\nB.2.2 RStudio\n\nNavigate to the RStudio website.\nDownload the RStudio Desktop installer. It should be something similar to “RStudio-2024.04.2-764.dmg”.\nFollow the installation instructions. Accept all defaults and install RStudio.\nOpen RStudio. If successful, then R and RStudio are installed.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Software Requirements</span>"
    ]
  }
]